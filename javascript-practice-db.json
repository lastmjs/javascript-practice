{
    "data": {
      "courses": [
        {
          "updatedAt": "2018-09-26T17:35:52.728Z",
          "concepts": [
            {
              "updatedAt": "2018-09-26T17:37:30.956Z",
              "assessments": [
                {
                  "updatedAt": "2018-12-15T01:17:28.027Z",
                  "id": "cjmjovn4p00hi0a58cfsjusdq",
                  "javaScript": "if (code1) {\n    answer = eval(code1) === true;\n}\nelse {\n    answer = false;\n}",
                  "order": 3,
                  "createdAt": "2018-09-26T21:56:13.656Z",
                  "assessML": "<p>Create a boolean value that is true.</p>\n<p>[code1]</p>\n[solution1]\n    <code-sample>\n        <template>\n          true\n        </template>\n    </code-sample>\n    <p><br></p>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-15T01:17:28.061Z",
                  "id": "cjmjoyjpv00hp0a58eqx4gu6d",
                  "javaScript": "if (code1) {\n    answer = eval(code1) === false;\n}\nelse {\n    answer = false;\n}",
                  "order": 4,
                  "createdAt": "2018-09-26T21:58:29.202Z",
                  "assessML": "<p>Create a boolean value that is false.</p>\n<p>[code1]</p>\n[solution1]\n    <code-sample>\n        <template>\n          false\n        </template>\n    </code-sample>\n    <p><br></p>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-15T01:17:28.095Z",
                  "id": "cjmjozc6500ht0a58hyzcgxsd",
                  "javaScript": "answer = radio1 === false && radio2 === true;",
                  "order": 6,
                  "createdAt": "2018-09-26T21:59:06.076Z",
                  "assessML": "<p>What is the value of foo?</p>\n<p>\n    <code-sample>\n        <template>\n            const foo = Boolean(0);\n        </template>\n    </code-sample>\n</p>\n<p><br></p>\n<p>\n    [radio1]true[radio1]<br><br>[radio2]false[radio2]\n</p>\n[solution1]\n    <p>0 is a <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\" target=\"_blank\">falsy</a> value.</p>\n<p>When coerced to a boolean, 0 will be false.</p>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-15T01:17:28.111Z",
                  "id": "cjmjozxuh00hx0a5848iyq0qu",
                  "javaScript": "answer = radio1 === true && radio2 === false;",
                  "order": 7,
                  "createdAt": "2018-09-26T21:59:34.168Z",
                  "assessML": "<p>What is the value of foo?</p>\n<p>\n    <code-sample>\n        <template>\n            const foo = Boolean('false');\n        </template>\n    </code-sample>\n</p>\n<p><br></p>\n<p>\n    [radio1]true[radio1]<br><br>[radio2]false[radio2]\n</p>\n[solution1]\n    <p>All strings except the empty string are <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Truthy\" target=\"_blank\">truthy</a> values, no matter the contents of the string.</p>\n<p>When a non-empty string is coerced to a boolean, its value will be true.</p>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-15T01:17:28.127Z",
                  "id": "cjmjp0h8y00i10a582mgq0dy0",
                  "javaScript": "const solutionString = input1.toLowerCase() + input2.toLowerCase() + input3.toLowerCase() + input4.toLowerCase() + input5.toLowerCase() + input6.toLowerCase();\nanswer =\n    solutionString.includes('boolean') &&\n    solutionString.includes('null') &&\n    solutionString.includes('undefined') &&\n    solutionString.includes('number') &&\n    solutionString.includes('string') &&\n    solutionString.includes('symbol');\n",
                  "order": 1,
                  "createdAt": "2018-09-26T21:59:59.313Z",
                  "assessML": "<p>What are the six primitive data types in JavaScript?</p>\n<p><br></p>\n<p>[input1]</p>\n<p>[input2]</p>\n<p>[input3]</p>\n<p>[input4]</p>\n<p>[input5]</p>\n<p>[input6]</p>\n[solution1]\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Data_types\" target=\"_blank\">primitive data types</a> in JavaScript are: \n  <ul>\n    <li><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Boolean\" target=\"_blank\">boolean</a></li>\n    <li><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Null\" target=\"_blank\">null</a></li>\n    <li><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Undefined\" target=\"_blank\">undefined</a></li>\n    <li><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Number\" target=\"_blank\">number</a></li>\n    <li><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/String\" target=\"_blank\">string</a></li>\n    <li><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Symbol\" target=\"_blank\">symbol</a></li>\n  </ul>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-15T01:17:28.154Z",
                  "id": "cjnv6az8f2cuh0995y87j03id",
                  "javaScript": "if (code1) {\n  const types = [null, undefined, 'hello', 2, Symbol(), false];\n  const foo = types[Math.floor(Math.random() * types.length)];\n\n  eval(code1 + `\n    answer = typeof foo === type;\n  `);\n}\nelse {\n  answer = false;\n}",
                  "order": 41,
                  "createdAt": "2018-10-30T03:29:12.927Z",
                  "assessML": "<p>A variable named foo will be provided in your code's environment.</p>\n<p>Store foo's type in a variable named type.</p>\n<p><br></p>\n<p>[code1]</p>\n[solution1]\n<code-sample>\n  <template>\n    const type = typeof foo;\n\n    // or\n\n    const type = typeof(foo);\n  </template>\n</code-sample>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-15T01:17:29.082Z",
                  "id": "cjnwajfsl5y740995lkooz1up",
                  "javaScript": "answer = check1 === true && check2 === true && check3 === false && check4 === false;",
                  "order": 0,
                  "createdAt": "2018-10-30T22:15:32.277Z",
                  "assessML": "<p>What is true about primitive data in JavaScript?</p><p>\n[shuffle1]\n</p><p>[check1]It is not an object[check1]</p>\n<p>[check2]It has no methods[check2]</p>\n<p>[check3]It can be altered[check3]</p>\n<p>[check4]It can have properties[check4]</p><p>\n[shuffle1]\n</p><p><br></p><p>\n[solution1]\n</p><p>Primitives in JavaScript are the most basic types of data, or data types as they are commonly called.</p>\n<p>A primitive in JavaScript is not an object, thus has no properties, and thus has no methods.</p>\n<p>Primitives are immutable, and thus cannot be changed or altered once created.</p><p>\n[solution1]</p>",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-15T01:17:28.206Z",
                  "id": "cjnwfb7yl6rwg09951ch0j1c0",
                  "javaScript": "answer = check1 === true && check2 === true && check3 === false && check4 === false && check5 === false;",
                  "order": 2,
                  "createdAt": "2018-10-31T00:29:06.957Z",
                  "assessML": "<p>Which of the following are possible boolean values?</p>\n[shuffle1]\n<p>[check1]true[check1]</p>\n<p>[check2]false[check2]</p>\n<p>[check3]void[check3]</p>\n<p>[check4]null[check4]</p>\n<p>[check5]undefined[check5]</p>\n[shuffle1]\n[solution1]\n<p>A <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Boolean\" target=\"_blank\">boolean</a> is a data type that only has two possible values: true or false.</p>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-15T01:17:28.222Z",
                  "id": "cjnwidr7q77mq0995l5oeoscu",
                  "javaScript": "if (code1) {\n  let coerce = null;\n  answer = eval(code1) === false;\n  coerce = 1;\n  answer = eval(code1) === true;\n}\nelse {\n  answer = false;\n}",
                  "order": 5,
                  "createdAt": "2018-10-31T01:55:04.070Z",
                  "assessML": "<p>A variable named coerce will be provided in the environment of your code.</p>\n<p>The variable coerce could be of any of the primitive data types.</p>\n<p>Coerce the variable coerce to a boolean.</p>\n<p>[code1]</p>\n[solution1]\n<p>JavaScript values can be <a href=\"https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch4.md\" target=\"_blank\">coerced or converted</a> explicitly or implicitly to primitive data types.</p>\n<p>In this exercise, you are asked to explicitly coerce a value to the boolean primitive data type.</p>\n<p>This can be done as follows:</p>\n<code-sample>\n  <template>\n    Boolean(coerce);\n\n    // or\n\n    !!coerce;   \n  </template>\n</code-sample>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-15T01:17:28.254Z",
                  "id": "cjnwknq2m7jnp0995hm2onk18",
                  "javaScript": "answer = check1 === false && check2 === false && check3 === false && check4 === true && check5 === false;",
                  "order": 10,
                  "createdAt": "2018-10-31T02:58:48.382Z",
                  "assessML": "<p>Which of the following are possible null values?</p>\n[shuffle1]\n<p>[check1]NaN[check1]</p>\n<p>[check2]-0[check2]</p>\n<p>[check3]''[check3]</p>\n<p>[check4]null[check4]</p>\n<p>[check5]undefined[check5]</p>\n[shuffle1]\n[solution1]\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null\" target=\"_blank\">Null</a> is a data type with one possible value: null. It is generally used to represent the intentional absence of any other value.</p>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-15T01:17:28.273Z",
                  "id": "cjnwkuye17kux0995b5veplfp",
                  "javaScript": "if (code1) {\n    answer = eval(code1) === null;\n}\nelse {\n    answer = false;\n}",
                  "order": 11,
                  "createdAt": "2018-10-31T03:04:25.753Z",
                  "assessML": "<p>Create a null value.</p>\n<p>[code1]</p>\n[solution1]\n    <code-sample>\n        <template>\n            null\n        </template>\n    </code-sample>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-15T01:17:28.289Z",
                  "id": "cjnwmoy4o7xmo09956fb8f46v",
                  "javaScript": "answer = radio1 === false && radio2 === true;",
                  "order": 12,
                  "createdAt": "2018-10-31T03:55:44.712Z",
                  "assessML": "<p>What is the value of foo?</p>\n<p>\n    <code-sample>\n        <template>\n            const foo = Boolean(null);\n        </template>\n    </code-sample>\n</p>\n<p><br></p>\n<p>\n    [radio1]true[radio1]<br><br>[radio2]false[radio2]\n</p>\n[solution1]\n    <p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null\" target=\"_blank\">null</a> is a <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\" target=\"_blank\">falsy</a> value.</p>\n<p>When coerced to a boolean, null will be false.</p>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-15T01:17:28.312Z",
                  "id": "cjnwn6v1n81dd099568zeb1oa",
                  "javaScript": "answer = radio1 === true && radio2 === false && radio3 === false && radio4 === false && radio5 === false && radio6 === false;",
                  "order": 8,
                  "createdAt": "2018-10-31T04:09:40.523Z",
                  "assessML": "<p>What will the following return?</p>\n<p>\n  <code-sample>\n    <template>\n      typeof true;\n    </template>\n  </code-sample>\n</p>\n[shuffle1]\n<p>\n[radio1]'boolean'[radio1]<br><br>[radio2]'object'[radio2]<br><br>[radio3]'string'[radio3]<br><br>[radio4]'number'[radio4]<br><br>[radio5]'undefined'[radio5]<br><br>[radio6]'symbol'[radio6]\n</p>\n[shuffle1]\n[solution1]\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\" target=\"_blank\">typeof operator</a> returns a string corresponding to the type of its operand.</p>\n<p>\nUsing the typeof operator with an operand of true will return the string 'boolean'.\n</p>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-15T01:17:28.328Z",
                  "id": "cjnwnj2ai846309957lkr5gwz",
                  "javaScript": "answer = radio1 === false && radio2 === true && radio3 === false && radio4 === false && radio5 === false && radio6 === false;",
                  "order": 13,
                  "createdAt": "2018-10-31T04:19:09.786Z",
                  "assessML": "<p>What will the following return?</p>\n<p>\n  <code-sample>\n    <template>\n      typeof null;\n    </template>\n  </code-sample>\n</p>\n[shuffle1]\n<p>\n[radio1]'boolean'[radio1]<br><br>[radio2]'object'[radio2]<br><br>[radio3]'string'[radio3]<br><br>[radio4]'number'[radio4]<br><br>[radio5]'undefined'[radio5]<br><br>[radio6]'symbol'[radio6]\n</p>\n[shuffle1]\n[solution1]\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\" target=\"_blank\">typeof operator</a> returns a string corresponding to the type of its operand.</p>\n<p>\nUsing the typeof operator with an operand of null will return the string 'object'.\n</p>\n<p>This is counter-intuitive, but remains in the language for <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof#null\" target=\"_blank\">legacy reasons</a>.</p>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-15T01:17:28.346Z",
                  "id": "cjnxgs2rlc76z0995f4zm6v0i",
                  "javaScript": "answer = check1 === false && check2 === false && check3 === false && check4 === false && check5 === true;",
                  "order": 15,
                  "createdAt": "2018-10-31T17:57:59.169Z",
                  "assessML": "<p>Which of the following are possible undefined values?</p>\n[shuffle1]\n<p>[check1]NaN[check1]</p>\n<p>[check2]-0[check2]</p>\n<p>[check3]''[check3]</p>\n<p>[check4]void[check4]</p>\n<p>[check5]undefined[check5]</p>\n[shuffle1]\n[solution1]\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Undefined\" target=\"_blank\">undefined</a> primitive data type has one possible value: undefined. It can be thought of as indicating an unintended absence, as opposed to null. It is automatically present in the following scenarios:</p>\n<p>\n<ul>\n  <li>The value of a variable that has not yet been assigned a value</li>\n  <li>The return value of a function without an evaluated return statement</li>\n  <li>The value of a non-existent object property or array element</li>\n  <li>The value of a function parameter with no supplied argument</li>\n</ul>\n</p>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-15T01:17:28.380Z",
                  "id": "cjnxgyeisc8by0995nbb5r7ip",
                  "javaScript": "if (code1 || code1 === '') {\n    answer = eval(code1) === undefined;\n}\nelse {\n    answer = false;\n}",
                  "order": 16,
                  "createdAt": "2018-10-31T18:02:54.340Z",
                  "assessML": "<p>Create an undefined value.</p>\n<p>[code1]</p>\n[solution1]\n    <code-sample>\n        <template>\n          // no value is necessary\n\n          // or\n\n          undefined\n        </template>\n    </code-sample>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-15T01:17:28.398Z",
                  "id": "cjnxh3jj2c9cg0995fc9o3whu",
                  "javaScript": "answer = radio1 === false && radio2 === true;",
                  "order": 17,
                  "createdAt": "2018-10-31T18:06:54.110Z",
                  "assessML": "<p>What is the value of foo?</p>\n<p>\n    <code-sample>\n        <template>\n            const foo = Boolean(undefined);\n        </template>\n    </code-sample>\n</p>\n<p><br></p>\n<p>\n    [radio1]true[radio1]<br><br>[radio2]false[radio2]\n</p>\n[solution1]\n    <p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\" target=\"_blank\">undefined</a> is a <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\" target=\"_blank\">falsy</a> value.</p>\n<p>When coerced to a boolean, undefined will be false.</p>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-15T01:17:28.430Z",
                  "id": "cjnxh669ic9w10995y7zpkcz3",
                  "javaScript": "answer = radio1 === false && radio2 === false && radio3 === false && radio4 === false && radio5 === true && radio6 === false;",
                  "order": 18,
                  "createdAt": "2018-10-31T18:08:56.886Z",
                  "assessML": "<p>What will the following return?</p>\n<p>\n  <code-sample>\n    <template>\n      typeof undefined;\n    </template>\n  </code-sample>\n</p>\n[shuffle1]\n<p>\n[radio1]'boolean'[radio1]<br><br>[radio2]'object'[radio2]<br><br>[radio3]'string'[radio3]<br><br>[radio4]'number'[radio4]<br><br>[radio5]'undefined'[radio5]<br><br>[radio6]'symbol'[radio6]\n</p>\n[shuffle1]\n[solution1]\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\" target=\"_blank\">typeof operator</a> returns a string corresponding to the type of its operand.</p>\n<p>\nUsing the typeof operator with an operand of undefined will return the string 'undefined'.\n</p>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-15T01:17:28.462Z",
                  "id": "cjnxjn64xcr2e0995h7kf1v0l",
                  "javaScript": "answer = check1 === true && check2 === true && check3 === false && check4 === false && check5 === false && check6 === false;",
                  "order": 9,
                  "createdAt": "2018-10-31T19:18:09.105Z",
                  "assessML": "<p>Which of the following are boolean literals?</p>\n[shuffle1]\n[check1]\n<p>\n  <code-sample>\n    <template>\n      true\n    </template>\n  </code-sample>\n</p>\n[check1]\n[check2]\n<p>\n  <code-sample>\n    <template>\n      false\n    </template>\n  </code-sample>\n</p>\n[check2]\n[check3]\n<p>\n  <code-sample>\n    <template>\n      !!0\n    </template>\n  </code-sample>\n</p>\n[check3]\n[check4]\n<p>\n  <code-sample>\n    <template>\n      !!1\n    </template>\n  </code-sample>\n</p>\n[check4]\n[check5]\n<p>\n  <code-sample>\n    <template>\n      'true'\n    </template>\n  </code-sample>\n</p>\n[check5]\n[check6]\n<p>\n  <code-sample>\n    <template>\n      'false'\n    </template>\n  </code-sample>\n</p>\n[check6]\n[shuffle1]\n[solution1]\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Literals\" target=\"_blank\">Literals</a> are fixed values that are typed directly into source code.</p>\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Boolean_literals\" target=\"_blank\">boolean literals</a> are as follows:</p>\n<p>\n<code-sample>\n  <template>\n    true\n\n    // or\n\n    false\n  </template>\n</code-sample>\n</p>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-15T01:17:28.487Z",
                  "id": "cjnxk92krcu970995s1v2ai8f",
                  "javaScript": "answer = check1 === true && check2 === false && check3 === false && check4 === false && check5 === false;",
                  "order": 14,
                  "createdAt": "2018-10-31T19:35:10.923Z",
                  "assessML": "<p>Which of the following are null literals?</p>\n[shuffle1]\n[check1]\n<p>\n  <code-sample>\n    <template>\n      null\n    </template>\n  </code-sample>\n</p>\n[check1]\n[check2]\n<p>\n  <code-sample>\n    <template>\n      undefined\n    </template>\n  </code-sample>\n</p>\n[check2]\n[check3]\n<p>\n  <code-sample>\n    <template>\n      'null'\n    </template>\n  </code-sample>\n</p>\n[check3]\n[check4]\n<p>\n  <code-sample>\n    <template>\n      Boolean(null)\n    </template>\n  </code-sample>\n</p>\n[check4]\n[check5]\n<p>\n  <code-sample>\n    <template>\n      'undefined'\n    </template>\n  </code-sample>\n</p>\n[check5]\n[shuffle1]\n[solution1]\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Literals\" target=\"_blank\">Literals</a> are fixed values that are typed directly into source code.</p>\n<p>The null literal is as follows:</p>\n<p>\n<code-sample>\n  <template>\n    null\n  </template>\n</code-sample>\n</p>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-15T01:17:28.563Z",
                  "id": "cjnxke8fucv6c0995ryaev8p3",
                  "javaScript": "answer = check1 === false && check2 === true && check3 === false && check4 === false && check5 === false;",
                  "order": 19,
                  "createdAt": "2018-10-31T19:39:11.802Z",
                  "assessML": "<p>Which of the following are undefined literals?</p>\n[shuffle1]\n[check1]\n<p>\n  <code-sample>\n    <template>\n      null\n    </template>\n  </code-sample>\n</p>\n[check1]\n[check2]\n<p>\n  <code-sample>\n    <template>\n      undefined\n    </template>\n  </code-sample>\n</p>\n[check2]\n[check3]\n<p>\n  <code-sample>\n    <template>\n      'null'\n    </template>\n  </code-sample>\n</p>\n[check3]\n[check4]\n<p>\n  <code-sample>\n    <template>\n      Boolean(undefined)\n    </template>\n  </code-sample>\n</p>\n[check4]\n[check5]\n<p>\n  <code-sample>\n    <template>\n      'undefined'\n    </template>\n  </code-sample>\n</p>\n[check5]\n[shuffle1]\n[solution1]\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Literals\" target=\"_blank\">Literals</a> are fixed values that are typed directly into source code.</p>\n<p>The undefined literal is as follows:</p>\n<p>\n<code-sample>\n  <template>\n    undefined\n  </template>\n</code-sample>\n</p>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-15T01:17:28.589Z",
                  "id": "cjnxkskvfcxkk0995rnuj35l2",
                  "javaScript": "answer = check1 === true && check2 === true && check3 === true && check4 === true && check5 === false && check6 === true;",
                  "order": 20,
                  "createdAt": "2018-10-31T19:50:21.099Z",
                  "assessML": "<p>Which of the following are possible number values?</p>\n[shuffle1]\n<p>[check1]526.34[check1]</p>\n<p>[check2]Infinity[check2]</p>\n<p>[check3]NaN[check3]</p>\n<p>[check4]-Infinity[check4]</p>\n<p>[check5]'0'[check5]</p>\n<p>[check6]7[check6]</p>\n[shuffle1]\n[solution1]\n<p>A <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" target=\"_blank\">number</a> is a data type that has the following possible values:</p>\n<p>\n<ul>\n  <li>Any <a href=\"https://en.wikipedia.org/wiki/IEEE_754\" target=\"_blank\">IEEE 754</a> 64-bit floating-point number</li>\n  <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity\" target=\"_blank\">Infinity</a></li>\n  <li>-Infinity</li>\n  <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN\" target=\"_blank\">NaN</a></li>\n</ul>\n</p>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-15T01:17:28.619Z",
                  "id": "cjnxl3u4ucz7i0995z4l6ujs9",
                  "javaScript": "if (code1) {\n    answer = eval(code1) === 10;\n}\nelse {\n    answer = false;\n}",
                  "order": 21,
                  "createdAt": "2018-10-31T19:59:06.318Z",
                  "assessML": "<p>Create the numeric value 10.</p>\n<p>[code1]</p>\n[solution1]\n<p>A sequence of digits is interpreted as a base-10 integer.</p>\n    <code-sample>\n        <template>\n            10\n        </template>\n    </code-sample>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-15T01:17:28.642Z",
                  "id": "cjnxlbxixd0fc0995sipjafuv",
                  "javaScript": "if (code1) {\n    answer = eval(code1) === 0x8C90B584;\n}\nelse {\n    answer = false;\n}",
                  "order": 22,
                  "createdAt": "2018-10-31T20:05:23.961Z",
                  "assessML": "<p>Create the numeric hexadecimal value 8C90B584.</p>\n<p>[code1]</p>\n[solution1]\n<p>0x followed by a sequence of hexadecimal digits is interpreted as a base-16 integer.</p>\n    <code-sample>\n        <template>\n            0x8C90B584;\n        </template>\n    </code-sample>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-15T01:17:28.661Z",
                  "id": "cjnxmmet7d53q0995n6xqeufi",
                  "javaScript": "if (code1) {\n  answer = eval(code1).toString() === '123.456' && typeof eval(code1) === 'number';\n}\nelse {\n    answer = false;\n}",
                  "order": 23,
                  "createdAt": "2018-10-31T20:41:32.539Z",
                  "assessML": "<p>Create the floating point value 123.456.</p>\n<p>[code1]</p>\n[solution1]\n<p>A sequence of digits followed by a decimal point and another sequence of digits is interpreted as a floating point number.</p>\n    <code-sample>\n        <template>\n          123.456\n        </template>\n    </code-sample>\n    <p><br></p>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-15T01:17:28.686Z",
                  "id": "cjnxnkbhgd7z3099522i0zm07",
                  "javaScript": "if (code1) {\n  answer = eval(code1).toString() === '1.7e+40' && typeof eval(code1) === 'number';\n}\nelse {\n    answer = false;\n}",
                  "order": 24,
                  "createdAt": "2018-10-31T21:07:54.532Z",
                  "assessML": "<p>Using floating point exponential notation, create the value 1.7 x 10^40.</p>\n<p>[code1]</p>\n[solution1]\n<p>A sequence of digits followed by the letter e, followed by an optional + or -, followed by an integer exponent is interpreted as a floating point number using exponential notation.</p>\n    <code-sample>\n        <template>\n            1.7e40\n        </template>\n    </code-sample>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-15T01:17:28.711Z",
                  "id": "cjnxo2ft8d9d80995agl714e3",
                  "javaScript": "if (code1) {\n  const intString = '5123512342';\n  answer = eval(code1) === 5123512342;\n}\nelse {\n  answer = false;\n}",
                  "order": 26,
                  "createdAt": "2018-10-31T21:21:59.948Z",
                  "assessML": "<p>A variable named intString will be provided in your code's environment.</p>\n<p>Convert intString into a number, preserving its integer nature.</p>\n<p>[code1]</p>\n[solution1]\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt\" target=\"_blank\">parseInt</a> takes a string and returns an integer.</p>\n<code-sample>\n  <template>\n    parseInt(intString)\n  </template>\n</code-sample>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-15T01:17:28.729Z",
                  "id": "cjnxocucgdac60995mqp1nv1r",
                  "javaScript": "if (code1) {\n  const floatString = '2842935829.235235';\n  answer = eval(code1).toString() === floatString && typeof eval(code1) === 'number';\n}\nelse {\n  answer = false;\n}",
                  "order": 27,
                  "createdAt": "2018-10-31T21:30:05.344Z",
                  "assessML": "<p>A variable named floatString will be provided in your code's environment.</p>\n<p>Convert floatString into a number, preserving its floating point nature.</p>\n<p>[code1]</p>\n[solution1]\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\" target=\"_blank\">parseFloat</a> takes a string and returns a floating point number.</p>\n<code-sample>\n  <template>\n    parseFloat(floatString)\n  </template>\n</code-sample>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-15T01:17:28.751Z",
                  "id": "cjnxoqz4wdbox09957oaiz3li",
                  "javaScript": "if (code1) {\n  const coerceString = '0';\n  const result = eval(code1);\n  answer = result === 0;\n}\nelse {\n  answer = false;\n}",
                  "order": 25,
                  "createdAt": "2018-10-31T21:41:04.736Z",
                  "assessML": "<p>A variable named coerceString will be provided in the environment of your code.</p>\n<p>Coerce the variable coerceString to a number.</p>\n<p>[code1]</p>\n[solution1]\n<p>JavaScript values can be <a href=\"https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch4.md\" target=\"_blank\">coerced or converted</a> explicitly or implicitly to primitive data types.</p>\n<p>In this exercise, you are asked to explicitly coerce a string to the number primitive data type.</p>\n<p>This can be done as follows:</p>\n<code-sample>\n  <template>\n    // prefer parseInt when parsing a string formatted as an integer\n    parseInt(coerceString);\n\n    // or\n\n    // prefer parseFloat when parsing a string formatted as a floating point number\n    parseFloat(coerceString);\n\n    // or\n\n    Number(coerceString);\n\n    // or\n\n    +coerceString;\n  </template>\n</code-sample>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-15T01:17:28.774Z",
                  "id": "cjnxoyunedcaf0995pnm433wj",
                  "javaScript": "answer = radio1 === false && radio2 === false && radio3 === false && radio4 === true && radio5 === false && radio6 === false;",
                  "order": 29,
                  "createdAt": "2018-10-31T21:47:12.170Z",
                  "assessML": "<p>What will the following return?</p>\n<p>\n  <code-sample>\n    <template>\n      typeof 56;\n    </template>\n  </code-sample>\n</p>\n[shuffle1]\n<p>\n[radio1]'boolean'[radio1]<br><br>[radio2]'object'[radio2]<br><br>[radio3]'string'[radio3]<br><br>[radio4]'number'[radio4]<br><br>[radio5]'undefined'[radio5]<br><br>[radio6]'symbol'[radio6]\n</p>\n[shuffle1]\n[solution1]\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\" target=\"_blank\">typeof operator</a> returns a string corresponding to the type of its operand.</p>\n<p>\nUsing the typeof operator with an operand of 56 will return the string 'number'.\n</p>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-15T01:17:28.791Z",
                  "id": "cjnxp5us0dcvd0995h3tv9lhp",
                  "javaScript": "answer = check1 === false && check2 === true && check3 === false && check4 === true && check5 === true;",
                  "order": 30,
                  "createdAt": "2018-10-31T21:52:38.928Z",
                  "assessML": "<p>Which of the following are number literals?</p>\n[shuffle1]\n[check1]\n<p>\n  <code-sample>\n    <template>\n      '100'\n    </template>\n  </code-sample>\n</p>\n[check1]\n[check2]\n<p>\n  <code-sample>\n    <template>\n      100\n    </template>\n  </code-sample>\n</p>\n[check2]\n[check3]\n<p>\n  <code-sample>\n    <template>\n      Number('100')\n    </template>\n  </code-sample>\n</p>\n[check3]\n[check4]\n<p>\n  <code-sample>\n    <template>\n      Infinity\n    </template>\n  </code-sample>\n</p>\n[check4]\n[check5]\n<p>\n  <code-sample>\n    <template>\n      NaN\n    </template>\n  </code-sample>\n</p>\n[check5]\n[shuffle1]\n[solution1]\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Literals\" target=\"_blank\">Literals</a> are fixed values that are typed directly into source code.</p>\n<p>Besides literally typed numbers, the number literals include Infinity, -Infinity, and NaN.</p>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-15T01:17:28.814Z",
                  "id": "cjnxsfbfvdmx20995cknip818",
                  "javaScript": "if (code1) {\n  const coerceToString = 512581941213;\n  const result = eval(code1);\n  answer = result === '512581941213';\n}\nelse {\n  answer = false;\n}",
                  "order": 28,
                  "createdAt": "2018-10-31T23:23:59.274Z",
                  "assessML": "<p>A number stored in a variable named coerceToString will be provided in your code's environment.</p>\n<p>Convert coerceToString to a string.</p>\n<p>[code1]</p>\n[solution1]\n<p>There are many ways to convert a number to a string. The most idiomatic is probably to call the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString\" target=\"_blank\">toString</a> method directly on the number.</p>\n<p>A few possibilities are as follows:</p>\n<code-sample>\n  <template>\n    coerceToString.toString()\n \n    // or\n\n    String(coerceToString)\n\n    // or\n\n    `${coerceToString}`\n\n    // or\n\n    coercetoString + ''\n  </template>\n</code-sample>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-15T01:17:28.839Z",
                  "id": "cjnxt2jvbdovf0995fn0lp1xm",
                  "javaScript": "answer = check1 === false && check2 === true && check3 === true && check4 === true;",
                  "order": 31,
                  "createdAt": "2018-10-31T23:42:03.287Z",
                  "assessML": "<p>Which of the following are possible string values?</p>\n[shuffle1]\n<p>[check1]string[check1]</p>\n<p>[check2]'string'[check2]</p>\n<p>[check3]\"string\"[check3]</p>\n<p>[check4]`string`[check4]</p>\n[shuffle1]\n[solution1]\n<p>A <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" target=\"_blank\">string</a> is a sequence of 16-bit values enclosed in single quotes, double quotes, or backticks.</p>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-15T01:17:28.865Z",
                  "id": "cjnxt6gj8dpaj099561v2nutn",
                  "javaScript": "if (code1) {\n  console.log(code1)\n  const result = eval(code1);\n  answer = result === `Hello Earth!`;\n}\nelse {\n  answer = false;\n}",
                  "order": 32,
                  "createdAt": "2018-10-31T23:45:05.588Z",
                  "assessML": "<p>Create a string with the following text:</p>\n<p>Hello Earth!</p>\n<p>[code1]</p>\n[solution1]\n<code-sample>\n  <template>\n    'Hello Earth!'\n\n    // or\n\n    \"Hello Earth!\"\n\n    // or\n\n    `Hello Earth!`\n  </template>\n</code-sample>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-15T01:17:28.882Z",
                  "id": "cjnxu0791dsv909953k06enhg",
                  "javaScript": "if (code1) {\n  const result = eval(code1);\n  answer = result === `Sally's own words were frightening: \"It's over\"`;\n}\nelse {\n  answer = false;\n}",
                  "order": 33,
                  "createdAt": "2018-11-01T00:08:13.237Z",
                  "assessML": "<p>Create a string with the following text:</p>\n<p>Sally's own words were frightening: \"It's over\"</p>\n<p>[code1]</p>\n[solution1]\n<p>Certain characters in a string must be escaped depending on how the string literal is created.</p>\n<p>Escaping a character is done by preceding it immediately with a backslash: \\</p>\n<p>\nIf the string literal is created with single quotes, then single quotes must be escaped.\n</p>\n<p>\nIf the string literal is created with double quotes, then double quotes must be escaped.\n</p>\n<p>If the string literal is created with backticks, then backticks must be escaped.</p>\n<code-sample>\n  <template>\n    'Sally\\'s own words were frightening: \"It\\'s over\"'\n\n    // or\n\n    \"Sally's own words were frightening: \\\"It's over\\\"\"\n\n    // or\n\n    `Sally's own words were frightening: \"It's over\"`\n  </template>\n</code-sample>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-15T01:17:28.907Z",
                  "id": "cjnxunutwdv830995cdhz46l3",
                  "javaScript": "if (code1) {\n  let coerce = true;\n  answer = eval(code1) === 'true';\n  coerce = 10;\n  answer = answer && eval(code1) === '10';\n  coerce = 'hello';\n  answer = answer && eval(code1) === 'hello';\n  coerce = null;\n  answer = answer && eval(code1) === 'null';\n  coerce = undefined;\n  answer = answer && eval(code1) === 'undefined';\n  coerce = Symbol();\n  answer = answer && eval(code1) === 'Symbol()';\n}\nelse {\n  answer = false;\n}",
                  "order": 34,
                  "createdAt": "2018-11-01T00:26:36.884Z",
                  "assessML": "<p>A variable named coerce will be provided in the environment of your code.</p>\n<p>The variable coerce could be of any of the primitive data types.</p>\n<p>Coerce the variable coerce to a string.</p>\n<p>[code1]</p>\n[solution1]\n<p>JavaScript values can be <a href=\"https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch4.md\" target=\"_blank\">coerced or converted</a> explicitly or implicitly to primitive data types.</p>\n<p>In this exercise, you are asked to explicitly coerce a value to the string primitive data type.</p>\n<p>The variable coerce can hold any primitive data, so we must use a method that works on all primitive data types.</p>\n<p>This can be done as follows:</p>\n<code-sample>\n  <template>\n    String(coerce)\n  </template>\n</code-sample>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-15T01:17:28.925Z",
                  "id": "cjnxuucafdw2u0995qcacs7o4",
                  "javaScript": "answer = radio1 === false && radio2 === false && radio3 === true && radio4 === false && radio5 === false && radio6 === false;",
                  "order": 35,
                  "createdAt": "2018-11-01T00:31:39.446Z",
                  "assessML": "<p>What will the following return?</p>\n<p>\n  <code-sample>\n    <template>\n      typeof 'elephants';\n    </template>\n  </code-sample>\n</p>\n[shuffle1]\n<p>\n[radio1]'boolean'[radio1]<br><br>[radio2]'object'[radio2]<br><br>[radio3]'string'[radio3]<br><br>[radio4]'number'[radio4]<br><br>[radio5]'undefined'[radio5]<br><br>[radio6]'symbol'[radio6]\n</p>\n[shuffle1]\n[solution1]\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\" target=\"_blank\">typeof operator</a> returns a string corresponding to the type of its operand.</p>\n<p>\nUsing the typeof operator with an operand of 'elephants' will return the string 'string'.\n</p>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-15T01:17:28.953Z",
                  "id": "cjnxv755kdxj70995xrmkgy6y",
                  "javaScript": "answer = check1 === false && check2 === false && check3 === true && check4 === false && check5 === true && check6 === true;",
                  "order": 36,
                  "createdAt": "2018-11-01T00:41:36.728Z",
                  "assessML": "<p>Which of the following are string literals?</p>\n[shuffle1]\n[check1]\n<p>\n  <code-sample>\n    <template>\n      true\n    </template>\n  </code-sample>\n</p>\n[check1]\n[check2]\n<p>\n  <code-sample>\n    <template>\n      false\n    </template>\n  </code-sample>\n</p>\n[check2]\n[check3]\n<p>\n  <code-sample>\n    <template>\n      \"string\"\n    </template>\n  </code-sample>\n</p>\n[check3]\n[check4]\n<p>\n  <code-sample>\n    <template>\n      string\n    </template>\n  </code-sample>\n</p>\n[check4]\n[check5]\n<p>\n  <code-sample>\n    <template>\n      'true'\n    </template>\n  </code-sample>\n</p>\n[check5]\n[check6]\n<p>\n  <code-sample>\n    <template>\n      'false'\n    </template>\n  </code-sample>\n</p>\n[check6]\n[shuffle1]\n[solution1]\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Literals\" target=\"_blank\">Literals</a> are fixed values that are typed directly into source code.</p>\n<p>A string literal can be created as follows:</p>\n<p>\n<code-sample>\n  <template>\n    'example string'\n\n    // or\n\n    \"example string\"\n\n    // or\n\n    `example string`\n  </template>\n</code-sample>\n</p>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-15T01:17:28.984Z",
                  "id": "cjnxydmuae9mu0995rwsannvf",
                  "javaScript": "answer = check1 === true && check2 === true && check3 === false;",
                  "order": 37,
                  "createdAt": "2018-11-01T02:10:38.434Z",
                  "assessML": "<p>Which of the following are ways of creating a symbol value?</p>\n[shuffle1]\n<p>[check1]Symbol()[check1]</p>\n<p>[check2]Symbol('description')[check2]</p>\n<p>[check3]new Symbol()[check3]</p>\n[shuffle1]\n[solution1]\n<p>\nA <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Symbol\" target=\"_blank\">symbol</a> is a data type with exactly one value per instance.\n</p>\n<p>\nUsing a symbol as a property key effectively allows you to create anonymous or \"private\" object properties.\n</p>\n<p>\nSymbols can be created in two ways:\n</p>\n<code-sample>\n  <template>\n    Symbol()\n\n    // or\n\n    Symbol('description')\n  </template>\n</code-sample>\n<p>The description has no bearing on the value of the symbol. Any instance of a symbol will always be unique.</p>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-15T01:17:29.009Z",
                  "id": "cjnxymix2eam509953gx7fdu8",
                  "javaScript": "if (code1) {\n  answer = typeof eval(code1) === 'symbol';\n}\nelse {\n  answer = false;\n}",
                  "order": 38,
                  "createdAt": "2018-11-01T02:17:33.254Z",
                  "assessML": "<p>Create a symbol.</p>\n<p>[code1]</p>\n[solution1]\n<p>A <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Symbol\" target=\"_blank\">symbol</a> is created using the global Symbol function.</p>\n<p>The optional parameter is a description, which is only used for debugging purposes.</p>\n<code-sample>\n  <template>\n    Symbol()\n\n    // or\n\n    Symbol('some kind of description')\n  </template>\n</code-sample>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-15T01:17:29.038Z",
                  "id": "cjnxyx936eby30995xuf2nqg9",
                  "javaScript": "if (code1) {\n  const symbol = Symbol('f93jfks9gj3kg');\n  answer = eval(code1) === `Symbol(f93jfks9gj3kg)`;\n}\nelse {\n  answer = false;\n}",
                  "order": 39,
                  "createdAt": "2018-11-01T02:25:53.730Z",
                  "assessML": "<p>A variable named symbol will be provided in the environment of your editor.</p>\n<p>Coerce symbol to a string.</p>\n<p>[code1]</p>\n[solution1]\n<p>JavaScript values can be <a href=\"https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch4.md\" target=\"_blank\">coerced or converted</a> explicitly or implicitly to primitive data types.</p>\n<p>In this exercise, you are asked to explicitly coerce a symbol to the string primitive data type.</p>\n<p>This can be done as follows:</p>\n<code-sample>\n  <template>\n    symbol.toString()\n\n    // or\n\n    String(symbol)\n  </template>\n</code-sample>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-15T01:17:29.060Z",
                  "id": "cjnxz5nvuecvk0995ou0qixdg",
                  "javaScript": "answer = radio1 === false && radio2 === false && radio3 === false && radio4 === false && radio5 === false && radio6 === true;",
                  "order": 40,
                  "createdAt": "2018-11-01T02:32:26.154Z",
                  "assessML": "<p>What will the following return?</p>\n<p>\n  <code-sample>\n    <template>\n      typeof Symbol();\n    </template>\n  </code-sample>\n</p>\n[shuffle1]\n<p>\n[radio1]'boolean'[radio1]<br><br>[radio2]'object'[radio2]<br><br>[radio3]'string'[radio3]<br><br>[radio4]'number'[radio4]<br><br>[radio5]'undefined'[radio5]<br><br>[radio6]'symbol'[radio6]\n</p>\n[shuffle1]\n[solution1]\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\" target=\"_blank\">typeof operator</a> returns a string corresponding to the type of its operand.</p>\n<p>\nUsing the typeof operator with an operand of Symbol() will return the string 'symbol'.\n</p>\n[solution1]",
                  "verified": true
                }
              ],
              "id": "cjmjfe8gm00310a58y1127kpl",
              "order": 0,
              "createdAt": "2018-09-26T17:30:44.950Z",
              "title": "Primitive data types"
            },
            {
              "updatedAt": "2018-09-26T17:37:38.169Z",
              "assessments": [
                {
                  "updatedAt": "2018-12-15T21:30:00.898Z",
                  "id": "cjmjpnksk00mb0a58tmsbgwof",
                  "javaScript": "if (code1) {\n    eval(code1 + `\n        answer = JSON.stringify(foo) === '{}';\n    `);\n}\nelse {\n    answer = false;\n}",
                  "order": 6,
                  "createdAt": "2018-09-26T22:17:56.996Z",
                  "assessML": "<p><span></span></p><p dir=\"ltr\" style=\"\">1. Considering the lexical and global scope, every object in <span style=\"\">JavaScript</span>&nbsp;has a property called constructor which references the function that was used to create that object.&nbsp;</p><p dir=\"ltr\" style=\"\">2. Let’s explore objects by using the dot notation and constructors. Dot notation, kind of serves as a ‘navigator’ between the different pre-provided objects in our scope. That is, different methods and properties are always part of some object constructor.</p><p dir=\"ltr\" style=\"\">3. Dot notation allows to set properties on objects, access them and assign variables to them. </p>\n<p><span></span></p><p dir=\"ltr\" style=\"\"><span style=\"color: rgb(0, 0, 0);\">Add the ‘value’ property to the variable 'ref' using the dot notation and assign it the value '10'.&nbsp;</span></p><p dir=\"ltr\" style=\"\"><span style=\"color: rgb(0, 0, 0);\"><br></span></p><p dir=\"ltr\" style=\"\"><span style=\"color: rgb(0, 0, 0);\">Now that you’ve reassigned ref what would the result be? </span></p>\n<p><br></p><p>\n[solution1]</p><p>ref.value = 10;<br></p><p>\n[solution1]</p>",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-13T03:40:34.824Z",
                  "id": "cjmjpo8mv00mf0a58ljd3dh7f",
                  "javaScript": "if (code1) {\n    eval(code1 + `\n        answer = foo.hello === 'there';\n    `);\n}\nelse {\n    answer = false;\n}",
                  "order": 0,
                  "createdAt": "2018-09-26T22:18:27.894Z",
                  "assessML": "<p>Create an object named foo with one property.</p>\n<p>The property's key should be hello and its value the string 'there'.</p>\n<p><br></p>\n<p>[code1]</p>\n[solution1]\n    <code-sample>\n        <template>\n            const foo = {\n                hello: 'there'\n            };\n        </template>\n    </code-sample>\n    <p><br></p>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-15T01:52:40.767Z",
                  "id": "cjmjpp5ny00mj0a58ibs0x4xn",
                  "javaScript": "if (code1) {\n    eval(code1 + `\n      answer = monkey.type === 'chimp' && \n      monkey.numBananas === 50 && \n      monkey.ageInYears === 4\n  `);\n}\nelse {\n    answer = false;\n}",
                  "order": 2,
                  "createdAt": "2018-09-26T22:19:10.701Z",
                  "assessML": "<p>Create an object named monkey with three properties.</p>\n<p>One property should have a key called type with its value the string chimp.</p>\n<p>One property should have a key called numBananas with its value the number 50.</p>\n<p>One property should have a key called ageInYears with its value the number 4.</p>\n<p><br></p>\n<p>[code1]</p>\n<p><br></p>\n[solution1]\n    <p>The simplest way to create a <a href=\"https://www.quora.com/What-is-a-plainObject-in-JavaScript\" target=\"_blank\">plain data object</a> in JavaScript is to use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Object_literals\" target=\"_blank\">object literal</a> syntax.</p>\n    <p>Plain data objects only have properties with primitive key value pairs, meaning the keys and values are primitive data types.</p>\n    <p>The following is the best practice solution to this problem:</p>\n    <p>\n        <code-sample>\n            <template>\n                const monkey = {\n                    type: 'chimp',\n                    numBananas: 50,\n                    ageInYears: 4\n                };\n            </template>\n        </code-sample>\n    </p>\n    <p><br></p>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-13T03:59:23.235Z",
                  "id": "cjmjpq59300mn0a58hd28bnza",
                  "javaScript": "if (code1) {\n    eval(code1 + `\n        answer = JSON.stringify(foo.child) === '{}';\n    `);\n}\nelse {\n    answer = false;\n}",
                  "order": 1,
                  "createdAt": "2018-09-26T22:19:56.822Z",
                  "assessML": "<p>Create an object named foo with one property.</p>\n<p>The property's key should be child and its value an empty object.</p>\n<p><br></p>\n<p>[code1]</p>\n[solution1]\n    <code-sample>\n        <template>\n            const foo = {\n                child: {}\n            };\n        </template>\n    </code-sample>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-15T01:53:13.712Z",
                  "id": "cjmjpqtdl00mr0a58ua90qehb",
                  "javaScript": "if (code1) {\n    eval(code1 + `\n        answer = JSON.stringify(foo.child.grandchild) === '{}';\n    `);\n}\nelse {\n    answer = false;\n}",
                  "order": 3,
                  "createdAt": "2018-09-26T22:20:28.089Z",
                  "assessML": "<p>Create an object named foo with one property.</p>\n<p>The property's key should be child and its value an object with one property.</p>\n<p>That property's key should be grandchild and its value an empty object.</p>\n<p><br></p>\n<p>[code1]</p>\n[solution1]\n    <code-sample>\n        <template>\n            const foo = {\n                child: {}\n            };\n        </template>\n    </code-sample>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-15T21:30:01.040Z",
                  "id": "cjmjqhd3a00rr0a585k9v2k6p",
                  "javaScript": "if (code1) {\n    eval(code1 + `\n        answer = nothing() === undefined;\n    `);\n}\nelse {\n    answer = false;\n}",
                  "order": 5,
                  "createdAt": "2018-09-26T22:41:06.693Z",
                  "assessML": "<p dir=\"ltr\" style=\"\">Create a variable called ‘primitive’ with the value 100 and an object literal named ‘obj’ with a property named ‘primitive’ and assign the value ‘2’ to it.</p><p style=\"\">javascript<br></p><p style=\"\"><br></p><p style=\"\">[code1]</p><p style=\"\">[code1]</p><p style=\"\">[solution1]</p><p dir=\"ltr\" style=\"\"><span></span></p><p dir=\"ltr\" style=\"\">Considering the lexical and global scope, every object in JavaScript&nbsp;has a property called constructor which references the function that was used to create that object.&nbsp;</p><p dir=\"ltr\" style=\"\">Let’s explore objects by using the dot notation and constructors. Dot notation kind of serves as a ‘navigator’ between the different already given objects in our scope and the one we create in our software. That is, different methods and properties are always part of some object construct.&nbsp;</p><p dir=\"ltr\" style=\"\">Dot notation allows to set properties on objects, access them and assign variables to them. </p><p style=\"\">[solution1]</p>",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-15T21:42:42.972Z",
                  "id": "cjpkcscsorqd30a511hprxrnl",
                  "javaScript": "\nanswer = check1 === false && check2 === false && check3 === true && check4 === false;",
                  "order": 9,
                  "createdAt": "2018-12-11T23:04:38.088Z",
                  "assessML": "<p>\nWhich of the following is an object in JavaScript?&nbsp;&nbsp;</p><p>[shuffle1]&nbsp;</p><p>[check1]undefined[check1]&nbsp;</p><p>[check2]number[check2]</p><p>[check3]new Boolean[check3]</p><p>[check4]string[check4]</p><p>[shuffle1]&nbsp;</p><p>[solution1]</p><p>The new Boolean(false) is not just an object but a constructor function which is an object. Any \ntype that has the ‘new’ keyword is a constructor function but is also an object. We’ve learned so far that in JavaScript, we have primitive types and reference types. We will learn about reference types more once we cover object properties more in depth.&nbsp;</p><p>[solution1]&nbsp;</p>",
                  "verified": false
                },
                {
                  "updatedAt": "2018-12-15T21:43:35.093Z",
                  "id": "cjpm42iad1w710a84su3cf9xq",
                  "javaScript": "",
                  "order": 12,
                  "createdAt": "2018-12-13T04:36:07.573Z",
                  "assessML": "<p><span><span style=\"\">Set a property named ‘primitive’ to the object named ‘obj’</span></span>.</p><p><br></p><p>[code1]</p><p>[solution1]</p><p><span></span></p><p dir=\"ltr\" style=\"\"><span style=\"color: rgb(0, 0, 0);\">obj.primitive;</span></p><p>[solution1]&nbsp;</p>",
                  "verified": false
                },
                {
                  "updatedAt": "2018-12-15T21:43:35.044Z",
                  "id": "cjpnj4cma9ia80a42ehi5ga3g",
                  "javaScript": "",
                  "order": 10,
                  "createdAt": "2018-12-14T04:25:13.954Z",
                  "assessML": "<p dir=\"ltr\" style=\"\"><span style=\"color: rgb(0, 0, 0);\">Create a new object named 'myCar' by calling the ‘new’ keyword.&nbsp;</span></p><p dir=\"ltr\" style=\"\">Assign the property ‘make’&nbsp;to the object 'myCar' and assign it the value “Audi”.&nbsp;</p><p dir=\"ltr\" style=\"\">Assign another property to the object 'myCar' and give it the value “Quattro”.</p><p style=\"\">[solution1]</p><p style=\"\">&nbsp;<span style=\"\">var myCar = new Object();</span></p><span><p dir=\"ltr\" style=\"\"><span style=\"\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;myCar.make = “Audi”;</span></p><p dir=\"ltr\" style=\"\"><span style=\"\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;myCar.model = “Quattro”;</span></p><p dir=\"ltr\" style=\"\"><span></span></p><p dir=\"ltr\" style=\"\">Object literals and initializers are synonymous, however there’s another way to create an object initializer using the ‘new’ keyword.&nbsp; That’s what the object literal does under the hood anyway.&nbsp;</p><p dir=\"ltr\" style=\"\">We assign the object constructor to a variable but we can use user defined constructors as well, but literals are known to be easier to optimize at run-time.</p><p>[solution1]<br></p></span>",
                  "verified": false
                },
                {
                  "updatedAt": "2018-12-15T07:51:30.848Z",
                  "id": "cjpp5xhcw02940606ly8fo5j0",
                  "javaScript": "",
                  "order": 4,
                  "createdAt": "2018-12-15T07:51:30.848Z",
                  "assessML": "<p><span></span></p><p dir=\"ltr\" style=\"\"><span style=\"color: rgb(0, 0, 0);\">Create an object literal with the keyword called 'ref' with an empty object, give it the property of 'value' with the value 5. &nbsp;Create a variable called 'y' and assign the object named 'ref' to it.</span></p>",
                  "verified": false
                },
                {
                  "updatedAt": "2018-12-15T21:37:32.989Z",
                  "id": "cjppzfrr102mw0606j299r1hw",
                  "javaScript": "",
                  "order": 7,
                  "createdAt": "2018-12-15T21:37:32.989Z",
                  "assessML": "<p dir=\"ltr\" style=\"\"><span style=\"color: rgb(0, 0, 0);\"> Create a variable called ‘primitive’ with the value 100 and an object literal named ‘obj’ with a property named ‘primitive’ and assign the value ‘2’ to it.</span></p><p><span><br></span></p>",
                  "verified": false
                },
                {
                  "updatedAt": "2018-12-15T21:38:41.599Z",
                  "id": "cjppzh8ov02nz0606sswyq4of",
                  "javaScript": "",
                  "order": 8,
                  "createdAt": "2018-12-15T21:38:41.599Z",
                  "assessML": "<p dir=\"ltr\" style=\"\"><span style=\"color: rgb(0, 0, 0);\">Set a property named ‘primitive’ to the object named ‘obj’. </span></p><p><span><br></span></p><p dir=\"ltr\" style=\"\"><br></p>",
                  "verified": false
                },
                {
                  "updatedAt": "2018-12-15T21:43:35.125Z",
                  "id": "cjppzivxi02or0606tdc8y829",
                  "javaScript": "",
                  "order": 11,
                  "createdAt": "2018-12-15T21:39:58.373Z",
                  "assessML": "<p dir=\"ltr\" style=\"\"><span style=\"color: rgb(0, 0, 0);\">Create a new object named myCar by calling the ‘new’ keyword. Attach the property ‘make’</span></p><p dir=\"ltr\" style=\"\"><span style=\"color: rgb(0, 0, 0);\">to the object myCar and assign it the value “Audi”. Attach another property to the object myCar a</span>nd assign it the value “Quattro”.</p><p dir=\"ltr\" style=\"\"><br></p><p dir=\"ltr\" style=\"\"><span style=\"color: rgb(0, 0, 0);\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var myCar = new Object();</span></p><p dir=\"ltr\" style=\"\"><span style=\"color: rgb(0, 0, 0);\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myCar.make = “Audi”;</span></p><p dir=\"ltr\" style=\"\"><span style=\"color: rgb(0, 0, 0);\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myCar.model = “Quattro”;</span></p><p dir=\"ltr\" style=\"\"><br><br></p><p dir=\"ltr\" style=\"\"><span style=\"color: rgb(0, 0, 0);\">Object literals and initializers are synonymous, however there’s another way to create an object initializer using the ‘new’ keyword. &nbsp;That’s what the object literal does under the hood anyway. We assign the object constructor to a variable but we can also use user defined constructors as well, however, literals are known to be easier to optimize at runtime. </span></p>",
                  "verified": false
                },
                {
                  "updatedAt": "2018-12-16T10:18:12.696Z",
                  "id": "cjpqa9juy02tx06067k526kh3",
                  "javaScript": "\nanswer = check1 === true && check2 === false && check3 === false && check4 === false;\n\n\n\n",
                  "order": 14,
                  "createdAt": "2018-12-16T02:40:38.600Z",
                  "assessML": "<p dir=\"ltr\" style=\"\"><span style=\"color: rgb(0, 0, 0);\">Consider the following code:</span></p><p dir=\"ltr\" style=\"\">const person = {age: 25, name: steve, hobbies: swimming, driving, running }</p><p>const secondPerson = person;<br></p><p>person.name = rob<br></p><p>Since secondPerson is now an object with the name property, what would the property name value be after the reassignment (person.name) ? Notice we are reassigning the name property for person object!&nbsp;&nbsp;<br></p><p style=\"\">[shuffle1]&nbsp;</p><p style=\"\">[check1]rob[check1]&nbsp;</p><p style=\"\">[check2]steve[check2]</p><p style=\"\">[check3]undefined[check3]</p><p style=\"\">[check4]null[check4]</p><p style=\"\">[shuffle1]&nbsp;</p><p style=\"\">[solution1]</p><p dir=\"ltr\" style=\"\"><span style=\"color: rgb(0, 0, 0);\">Primitives in javascript are immutable. When primitives enter object territory, things start to change and values are passed by reference because objects are reference types. This means that if you create a key:value pair in an object, it will then store the value in memory just like a regular variable will, by assigning the value to the variable. However, when you assign property values to variables in objects and overwrite their value, other objects inherit that new value as well. For this reason it’s important to determine which of the data types are objects and which aren’t. If we want to retain full immutable object behaviour, we can take the main blueprint object, reassign it to a new variable and use methods like object.assign for it to keep it’s properties locked and immutable. If the new object contains other object types like arrays, we will need to do a deep clone in order to for the new object to keep its properties, and the object that is at the top of the prototype chain that all other objects can inherit from as well.&nbsp;&nbsp;</span></p><p style=\"\">[solution1]&nbsp;</p><p style=\"\"><br></p><p><br></p>",
                  "verified": false
                },
                {
                  "updatedAt": "2018-12-16T10:18:12.771Z",
                  "id": "cjpqqlzms02w10606k3948yhv",
                  "javaScript": "",
                  "order": 13,
                  "createdAt": "2018-12-16T10:18:12.771Z",
                  "assessML": "<p><span><span style=\"\">Create an object with the keyword ‘dragon’, give it a property called 'sound' with the string value of ‘roar’. Next, add a method called ‘fire’. The value of this method property should be an anonymous function with an empty body. &nbsp;</span></span><br></p>",
                  "verified": false
                },
                {
                  "updatedAt": "2018-12-27T02:27:34.139Z",
                  "id": "cjq5zn3wb04ab0606xfmhqnl0",
                  "javaScript": "",
                  "order": 15,
                  "createdAt": "2018-12-27T02:27:34.139Z",
                  "assessML": "<p dir=\"ltr\" style=\"\"><span style=\"color: rgb(0, 0, 0);\">Consider the following function: </span></p><p><br></p><p dir=\"ltr\" style=\"\"><span style=\"color: rgb(0, 0, 0);\">function run () {console.log(this)</span></p><p dir=\"ltr\" style=\"\"><span style=\"color: rgb(0, 0, 0);\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; console.log(this.speed)};</span></p><p><br></p><p dir=\"ltr\" style=\"\"><span style=\"color: rgb(0, 0, 0);\">let player = { run: run};</span></p><p><br></p><p dir=\"ltr\" style=\"\"><span style=\"color: rgb(0, 0, 0);\">Player.run;</span></p><p><br></p><p dir=\"ltr\" style=\"\"><span style=\"color: rgb(0, 0, 0);\">Considering that ‘this’ refers to the scope of the execution context at the time of execution, what would the result of running the function ‘run’ on the player object? </span></p><p>[solution]</p><p dir=\"ltr\" style=\"\">In this example, JavaScript&nbsp;will infer the the execution context without the ‘player’ object specifically specifying the function execution context. The ‘run’ function is a method. The ‘player’ object inferred that the ‘speed’ property executes on the ‘run’ function scope. The player object is separated from the ‘run’ function.&nbsp;</p><p dir=\"ltr\" style=\"\">This example is a good precursor (building block) to how the ‘new’ keyword binds ‘this’ to a newly created constructor. &nbsp;</p><p dir=\"ltr\" style=\"\"><span style=\"color: rgb(0, 0, 0);\"><br></span></p><p dir=\"ltr\" style=\"\"><span style=\"color: rgb(0, 0, 0);\">[solution]</span></p>",
                  "verified": false
                },
                {
                  "updatedAt": "2018-12-27T02:45:15.321Z",
                  "id": "cjq609upl04ay0606ndmlgxct",
                  "javaScript": "",
                  "order": 16,
                  "createdAt": "2018-12-27T02:45:15.321Z",
                  "assessML": "<p dir=\"ltr\" style=\"\"><span style=\"color: rgb(0, 0, 0);\"><br></span></p><p dir=\"ltr\" style=\"\"><span style=\"color: rgb(0, 0, 0);\"><br></span></p><p dir=\"ltr\" style=\"\"><span></span></p><p dir=\"ltr\" style=\"\"><span style=\"color: rgb(0, 0, 0);\"> Consider the following code: </span></p><p dir=\"ltr\" style=\"\">let car = Object.create(Object.prototype,<br></p><p dir=\"ltr\" style=\"\"><span style=\"color: rgb(0, 0, 0);\"> {</span></p><p dir=\"ltr\" style=\"\"><span style=\"color: rgb(0, 0, 0);\"> &nbsp;&nbsp;name:{</span></p><p dir=\"ltr\" style=\"\"><span style=\"color: rgb(0, 0, 0);\"> &nbsp;&nbsp;&nbsp;&nbsp;value: 'Quattro',</span></p><p dir=\"ltr\" style=\"\"><span style=\"color: rgb(0, 0, 0);\"> &nbsp;&nbsp;&nbsp;&nbsp;configurable: true,</span></p><p dir=\"ltr\" style=\"\"><span style=\"color: rgb(0, 0, 0);\"> &nbsp;&nbsp;&nbsp;&nbsp;writable: true,</span></p><p dir=\"ltr\" style=\"\"><span style=\"color: rgb(0, 0, 0);\"> &nbsp;&nbsp;&nbsp;&nbsp;enumerable: false</span></p><p dir=\"ltr\" style=\"\"><span style=\"color: rgb(0, 0, 0);\"> &nbsp;&nbsp;},</span></p><p dir=\"ltr\" style=\"\"><span style=\"color: rgb(0, 0, 0);\"> &nbsp;&nbsp;maker:{</span></p><p dir=\"ltr\" style=\"\"><span style=\"color: rgb(0, 0, 0);\"> &nbsp;&nbsp;&nbsp;&nbsp;value: 'Audi',</span></p><p dir=\"ltr\" style=\"\"><span style=\"color: rgb(0, 0, 0);\"> &nbsp;&nbsp;&nbsp;&nbsp;configurable: true,</span></p><p dir=\"ltr\" style=\"\"><span style=\"color: rgb(0, 0, 0);\"> &nbsp;&nbsp;&nbsp;&nbsp;writable: true,</span></p><p dir=\"ltr\" style=\"\"><span style=\"color: rgb(0, 0, 0);\"> &nbsp;&nbsp;&nbsp;&nbsp;enumerable: true</span></p><p dir=\"ltr\" style=\"\"><span style=\"color: rgb(0, 0, 0);\"> &nbsp;&nbsp;}</span></p><p dir=\"ltr\" style=\"\"><span style=\"color: rgb(0, 0, 0);\"> });</span></p><p><span></span></p><p dir=\"ltr\" style=\"\"><span style=\"color: rgb(0, 0, 0);\">What would the result of console.log(car.name) be? &nbsp;&nbsp;</span></p><p dir=\"ltr\" style=\"\"><span style=\"color: rgb(0, 0, 0);\"><br></span></p><p dir=\"ltr\" style=\"\"><span style=\"color: rgb(0, 0, 0);\">[solution]</span></p><p>console.log(car.name)    //Output: Quattro</p><p>[solution]</p>",
                  "verified": false
                }
              ],
              "id": "cjmjfffms00350a58xry48keh",
              "order": 1,
              "createdAt": "2018-09-26T17:31:40.899Z",
              "title": "Objects"
            },
            {
              "updatedAt": "2018-09-26T17:37:55.813Z",
              "assessments": [
                {
                  "updatedAt": "2018-12-08T00:00:59.673Z",
                  "id": "cjmjqhxsm00rv0a589z3q4qtp",
                  "javaScript": "if (code1) {\n    eval(code1 + `\n      answer = basicNumber() === 10\n    `);\n}\nelse {\n    answer = false;\n}",
                  "order": 1,
                  "createdAt": "2018-09-26T22:41:33.526Z",
                  "assessML": "<p>Create a function named basicNumber that returns the number 10.</p>\n<p><br></p>\n<p>[code1]</p>\n<p><br></p>\n[solution1]\n    <p>There are many ways to create a function in JavaScript.</p>\n    <p>These are some of the most common ways:</p>\n    <p><br></p>\n    <code-sample>\n        <template>\n            function basicNumber() {\n                return 10;\n            }\n\n            // or\n\n            const basicNumber = function() {\n                return 10;\n            };\n\n            // or\n\n            const basicNumber = () => {\n                return 10;\n            };\n        </template>\n    </code-sample>\n    <p><br></p>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-08T00:00:59.673Z",
                  "id": "cjmjqigic00rz0a5878v0jpgw",
                  "javaScript": "if (code1) {\n    eval(code1 + `\n        answer = hello() === 'mundo!';\n    `);\n}\nelse {\n    answer = false;\n}",
                  "order": 2,
                  "createdAt": "2018-09-26T22:41:57.780Z",
                  "assessML": "<p>Create a function named hello that returns the string 'mundo!'.</p>\n<p><br></p>\n<p>[code1]</p>\n[solution1]\n    <code-sample>\n        <template>\n            function hello() {\n                return 'mundo!';\n            }\n\n            // or\n\n            const hello = function() {\n                return 'mundo!';\n            }\n\n            // or\n\n            const hello = () => {\n                return 'mundo!';\n            };\n        </template>\n    </code-sample>\n    <p><br></p>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-08T00:00:59.673Z",
                  "id": "cjmjqj5hu00s30a58ouo18vup",
                  "javaScript": "if (code1) {\n    eval(code1 + `\n        answer = higherOrder()() === undefined;\n    `);\n}\nelse {\n    answer = false;\n}",
                  "order": 3,
                  "createdAt": "2018-09-26T22:42:30.162Z",
                  "assessML": "<p>Create a function named higherOrder that returns an empty function</p>\n<p><br></p>\n<p>[code1]</p>\n[solution1]\n    <code-sample>\n        <template>\n            function higherOrder() {\n                return function() {};\n            }\n\n            // or\n\n            function higherOrder() {\n                return () => {};\n            }\n\n            // or\n\n            const higherOrder = () => {\n                return function() {};\n            };\n\n            // or\n\n            const higherOrder = () => {\n                return () => {};\n            };\n        </template>\n    </code-sample>\n    <p><br></p>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-08T00:00:59.673Z",
                  "id": "cjmjqjpjc00s70a58evlz6o7g",
                  "javaScript": "if (code1) {\n    function countCats() {\n        return 14535;\n    }\n\n    eval(code1 + `\n        answer = numCats === countCats();\n    `);\n}\nelse {\n    answer = false;\n}",
                  "order": 4,
                  "createdAt": "2018-09-26T22:42:56.136Z",
                  "assessML": "<p>There is a function available to your editor called countCats.</p>\n<p>Invoke the function countCats and store it in a variable called numCats.</p>\n<p><br></p>\n<p>[code1]</p>\n[solution1]\n    <code-sample>\n        <template>\n            const numCats = countCats();\n        </template>\n    </code-sample>\n    <p><br></p>\n[solution1]",
                  "verified": true
                }
              ],
              "id": "cjmjffn8900390a58ocv8rarh",
              "order": 2,
              "createdAt": "2018-09-26T17:31:50.745Z",
              "title": "Functions"
            },
            {
              "updatedAt": "2018-09-26T17:38:03.813Z",
              "assessments": [
                {
                  "updatedAt": "2018-12-08T00:00:59.673Z",
                  "id": "cjmjq3g3400pz0a583io16byr",
                  "javaScript": "if (code1) {\n    eval(code1 + `\n        answer = Array.isArray(foo) && foo.length === 0;\n    `);\n}\nelse {\n    answer = false;\n}",
                  "order": 0,
                  "createdAt": "2018-09-26T22:30:17.391Z",
                  "assessML": "<p>Create an empty array named foo.</p>\n<p><br></p>\n<p>[code1]</p>\n[solution1]\n    <code-sample>\n        <template>\n            const foo = [];\n\n            // or\n\n            const foo = new Array();\n        </template>\n    </code-sample>\n    <p><br></p>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-08T00:00:59.673Z",
                  "id": "cjmjq59it00q30a58quttbqni",
                  "javaScript": "if (code1) {\n    eval(code1 + ' answer = numbers.length === 5 && typeof numbers[0] === \\'number\\' && typeof numbers[1] === \\'number\\' && typeof numbers[2] === \\'number\\' && typeof numbers[3] === \\'number\\' && typeof numbers[4] === \\'number\\'');\n}\nelse {\n    answer = false;\n}",
                  "order": 1,
                  "createdAt": "2018-09-26T22:31:42.196Z",
                  "assessML": "<p>Create an array named numbers with five elements, each element being of type number.</p>\n<p><br></p>\n<p>[code1]</p>\n<p><br></p>\n[solution1]\n    <code-sample>\n        <template>\n            const numbers = [1, 2, 3, 4, 5];\n            // or\n            const numbers = new Array(1, 2, 3, 4, 5);\n        </template>\n    </code-sample>\n    <p><br></p>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-08T00:00:59.673Z",
                  "id": "cjmjq5wsb00q70a58uyx4j0yl",
                  "javaScript": "if (code1) {\n    eval(code1 + `\n        answer = twoD.length === 1 && twoD[0].length === 0;\n    `);\n}\nelse {\n    answer = false;\n}",
                  "order": 2,
                  "createdAt": "2018-09-26T22:32:12.346Z",
                  "assessML": "<p>Create an array named twoD with one element.</p>\n<p>The one element should be an empty array.</p>\n<p><br></p>\n<p>[code1]</p>\n[solution1]\n    <code-sample>\n        <template>\n            const twoD = [[]];\n        </template>\n    </code-sample>\n    <p><br></p>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-08T00:00:59.673Z",
                  "id": "cjmjq6qb500qb0a58nqlwkfpt",
                  "javaScript": "if (code1) {\n    eval(code1 + `\n        answer = \n                fiveByFive.length === 5 &&\n                fiveByFive.reduce((result, outerItem) => {\n                    if (outerItem.length !== 5) {\n                        return false;\n                    }\n                    \n                    return result;\n                }, true)\n    `);\n}\nelse {\n    answer = false;\n}",
                  "order": 3,
                  "createdAt": "2018-09-26T22:32:50.608Z",
                  "assessML": "<p>Create an array named fiveByFive.</p>\n<p>Each element in the array should be an array with five elements of any type.</p>\n<p><br></p>\n<p>[code1]</p>\n[solution1]\n    <code-sample>\n        <template>\n            const fiveByFive = [\n                [1, 2, 3, 4, 5], \n                [1, 2, 3, 4, 5],\n                [1, 2, 3, 4, 5],\n                [1, 2, 3, 4, 5],\n                [1, 2, 3, 4, 5]\n            ];\n        </template>\n    </code-sample>\n    <p><br></p>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-08T00:00:59.673Z",
                  "id": "cjmjq7nmy00qf0a58o50umfad",
                  "javaScript": "if (code1) {\n    eval(code1 + `\n        answer = \n                threeByThreeByThree.length === 3 &&\n                threeByThreeByThree.reduce((result, level1) => {\n                    return result && level1.reduce((result, level2) => {\n                        if (level2.length !== 3) {\n                            return false;\n                        }\n\n                        return result;\n                    }, true);\n                }, true);\n    `);\n}\nelse {\n    answer = false;\n}",
                  "order": 4,
                  "createdAt": "2018-09-26T22:33:33.802Z",
                  "assessML": "<p>Create an array called threeByThreeByThree.</p>\n<p>The array should have three elements.</p>\n<p>Each element in the array should be an array with three elements.</p>\n<p>Each of those elements should be an array with three elements of any type.</p>\n<p><br></p>\n<p>[code1]</p>\n[solution1]\n    <code-sample>\n        <template>\n            const threeByThreeByThree = [\n                [\n                    [1, 2, 3],\n                    [1, 2, 3],\n                    [1, 2, 3]\n                ],\n                [\n                    [1, 2, 3],\n                    [1, 2, 3],\n                    [1, 2, 3]\n                ],\n                [\n                    [1, 2, 3],\n                    [1, 2, 3],\n                    [1, 2, 3]\n                ]\n            ];\n        </template>\n    </code-sample>\n    <p></br></p>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-08T00:00:59.673Z",
                  "id": "cjmjq8yzc00qj0a580sbns0ob",
                  "javaScript": "if (code1) {\n    const fruits = [\n        {\n            name: 'apple',\n            color: 'red'\n        },\n        {\n            name: 'orange',\n            color: 'orange'\n        },\n        {\n            name: 'banana',\n            color: 'yellow'\n        },\n        {\n            name: 'strawberry',\n            color: 'red'\n        },\n        {\n            name: 'blueberry',\n            color: 'blue'\n        },\n        {\n            name: 'lemon',\n            color: 'yellow'\n        }\n    ];\n\n    eval(code1 + `\n        const sortedByColor = sortByColor(fruits);\n        answer = sortedByColor.red === 2 && sortedByColor.orange === 1 && sortedByColor.yellow === 2 && sortedByColor.blue === 1;\n    `);\n}\nelse {\n    answer = false;\n}",
                  "order": 5,
                  "createdAt": "2018-09-26T22:34:35.159Z",
                  "assessML": "<p>You have an array that looks as follows:</p>\n<p>\n    <code-sample>\n        <template>\n            const fruits = [\n                {\n                    name: 'apple',\n                    color: 'red'\n                },\n                {\n                    name: 'orange',\n                    color: 'orange'\n                },\n                {\n                    name: 'banana',\n                    color: 'yellow'\n                },\n                {\n                    name: 'strawberry',\n                    color: 'red'\n                },\n                {\n                    name: 'blueberry',\n                    color: 'blue'\n                },\n                {\n                    name: 'lemon',\n                    color: 'yellow'\n                }\n            ];\n        </template>\n    </code-sample>\n</p>\n<p>Write a function named sortByColor that takes an array like fruits and returns an object.</p>\n<p>The keys of the object's properties are all the possible fruit colors in the array.</p>\n<p>The values of the object's properties are the number of fruits of that color in the array.</p>\n<p><br></p>\n<p>[code1]</p>\n[solution1]\n    <code-sample>\n        <template>\n            function sortByColor(fruits) {\n                return fruits.reduce((result, outerFruit) => {\n                    return {\n                        ...result,\n                        [outerFruit.color]: fruits.filter((innerFruit) => {\n                            return outerFruit.color === innerFruit.color;\n                        }).length\n                    };\n                }, {});\n            }\n        </template>\n    </code-sample>\n    <p><br></p>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-08T00:00:59.673Z",
                  "id": "cjmjqa25c00qn0a58ois1lqrl",
                  "javaScript": "if (code1) {\n    const jobs = [\n        {\n            id: 0,\n            timeInHours: 11\n        },\n        {\n            id: 1,\n            timeInHours: 15\n        },\n        {\n            id: 3,\n            timeInHours: 1\n        },\n        {\n            id: 4,\n            timeInHours: 30\n        },\n        {\n            id: 5,\n            timeInHours: 4\n        },\n        {\n            id: 6,\n            timeInHours: 2\n        },\n        {\n            id: 7,\n            timeInHours: 7\n        }\n    ];\n\n    eval(code1 + `\n        answer = \n                shortJobs.filter((job) => {\n                    return job.timeInHours < 10;\n                }).length === 4\n    `);\n}\nelse {\n    answer = false;\n}",
                  "order": 6,
                  "createdAt": "2018-09-26T22:35:25.920Z",
                  "assessML": "<p>\n    <code-sample>\n        <template>\n            const jobs = [\n                {\n                    id: 0,\n                    timeInHours: 1\n                },\n                {\n                    id: 1,\n                    timeInHours: 5\n                },\n                {\n                    id: 3,\n                    timeInHours: 10\n                },\n                {\n                    id: 4,\n                    timeInHours: 3\n                },\n                {\n                    id: 5,\n                    timeInHours: 14\n                },\n                {\n                    id: 6,\n                    timeInHours: 18\n                },\n                {\n                    id: 7,\n                    timeInHours: 7\n                }\n            ];\n        </template>\n    </code-sample>\n</p>\n<p>Your editor will have an array called jobs similar to the jobs array above.</p>\n<p>In a variable called shortJobs, store all of the jobs that took less than 10 hours.</p>\n<p><br></p>\n<p>[code1]</p>\n[solution1]\n    <code-sample>\n        <template>\n            const shortJobs = jobs.filter((job) => {\n                return job.timeInHours < 10;\n            });\n        </template>\n    </code-sample>\n    <p><br></p>\n[solution1]",
                  "verified": true
                }
              ],
              "id": "cjmjffqvv003d0a58xda1x2b0",
              "order": 3,
              "createdAt": "2018-09-26T17:31:55.483Z",
              "title": "Arrays"
            },
            {
              "updatedAt": "2018-09-26T17:38:12.362Z",
              "assessments": [
                {
                  "updatedAt": "2018-12-08T00:00:59.673Z",
                  "id": "cjmjqce6000qz0a58uc46zs7v",
                  "javaScript": "if (code1) {\n    eval(code1 + `\n        answer = MyClass.name === 'MyClass';\n    `);\n}\nelse {\n    answer = false;\n}",
                  "order": 0,
                  "createdAt": "2018-09-26T22:37:14.807Z",
                  "assessML": "<p>Create an empty class named MyClass.</p>\n<p><br></p>\n<p>[code1]</p>\n[solution1]\n    <code-sample>\n        <template>\n            class MyClass {}\n        </template>\n    </code-sample>\n    <p><br></p>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-08T00:00:59.673Z",
                  "id": "cjmjqd1kf00r30a589rkjmybf",
                  "javaScript": "if (code1) {\n    eval(code1 + `\n        answer = new MyClass().init === true;\n    `);\n}\nelse {\n    answer = false;\n}",
                  "order": 1,
                  "createdAt": "2018-09-26T22:37:45.134Z",
                  "assessML": "<p>Create a class named MyClass with a constructor that sets the init property to true.</p>\n<p><br></p>\n<p>[code1]</p>\n[solution1]\n    <code-sample>\n        <template>\n            class MyClass {\n                constructor() {\n                    this.init = true;\n                }\n            }\n        </template>\n    </code-sample>\n    <p><br></p>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-08T00:00:59.673Z",
                  "id": "cjmjqdpdt00r70a584o1ozxq2",
                  "javaScript": "if (code1) {\n    eval(code1 + ' const hans = new Hans(); answer = hans.pump() === true && hans.youUp() === true');\n}\nelse {\n    answer = false;\n}",
                  "order": 2,
                  "createdAt": "2018-09-26T22:38:16.000Z",
                  "assessML": "<p>Create a class named Hans with two methods that each return true.</p>\n<p>Name the methods pump and youUp.</p>\n<p><br></p>\n<p>[code1]</p>\n<p><br></p>\n[solution1]\n    <code-sample>\n        <template>\n            class Hans {\n                pump() {\n                    return true;\n                }\n\n                youUp() {\n                    return true;\n                }\n            }\n        </template>\n    </code-sample>\n    <p><br></p>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-08T00:00:59.673Z",
                  "id": "cjmjqearc00rb0a5818tfu2v8",
                  "javaScript": "if (code1) {\n    eval(code1 + `\n        answer = new Child().init === true;\n    `);\n}\nelse {\n    answer = false;\n}",
                  "order": 3,
                  "createdAt": "2018-09-26T22:38:43.703Z",
                  "assessML": "<p>Create a class named Parent with a constructor that sets the init property to true.</p>\n<p>Create a class called Child that inherits from Parent.</p>\n<p>Ensure that Child properly inherits from Parent when a new instance of Child is created.</p>\n<p><br></p>\n<p>[code1]</p>\n[solution1]\n    <code-sample>\n        <template>\n            class Parent {\n                constructor() {\n                    this.init = true;\n                }\n            }\n\n            class Child extends Parent {}\n        </template>\n    </code-sample>\n    <p><br></p>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-08T00:00:59.673Z",
                  "id": "cjmjqeyen00rf0a58urp1cfcz",
                  "javaScript": "if (code1) {\n    class Puppy {\n        constructor() {\n            this.one = 2562362;\n            this.two = 1215155;\n        }\n    }\n\n    eval(code1 + `\n        answer = puppy.one === 2562362 && puppy.two === 1215155;\n    `);\n}\nelse {\n    answer = false;\n} ",
                  "order": 4,
                  "createdAt": "2018-09-26T22:39:14.350Z",
                  "assessML": "<p>There is a class called Puppy that is available to your editor.</p>\n<p>Create an instance of Puppy and store it in a variable called puppy.</p>\n<p><br></p>\n<p>[code1]</p>\n[solution1]\n    <code-sample>\n        <template>\n            const puppy = new Puppy();\n        </template>\n    </code-sample>\n[solution1]",
                  "verified": true
                }
              ],
              "id": "cjmjffuzs003h0a58iv4tqrbb",
              "order": 4,
              "createdAt": "2018-09-26T17:32:00.808Z",
              "title": "Classes"
            },
            {
              "updatedAt": "2018-09-26T17:38:20.523Z",
              "assessments": [
                {
                  "updatedAt": "2018-12-08T00:00:59.673Z",
                  "id": "cjmjql51o00sf0a58mfym2fon",
                  "javaScript": "answer = input1 === 'module';",
                  "order": 0,
                  "createdAt": "2018-09-26T22:44:02.892Z",
                  "assessML": "<p>What is the correct value for the type attribute when importing a module through the script tag?</p>\n<p><br></p>\n<p>&lt;script type=\"[input1]\" src=\"my-module.js\" &gt;&lt;/script&gt;</p>\n<p><br></p>\n[solution1]\n    <p>&lt;script type=\"module\" src=\"my-module.js\" &gt;&lt;/script&gt;</p>\n    <p><br></p>\n[solution1]",
                  "verified": true
                }
              ],
              "id": "cjmjffy58003l0a58keok3lck",
              "order": 5,
              "createdAt": "2018-09-26T17:32:04.891Z",
              "title": "Modules"
            },
            {
              "updatedAt": "2018-09-26T17:38:29.621Z",
              "assessments": [
                {
                  "updatedAt": "2018-12-08T00:00:59.673Z",
                  "id": "cjmjqlpcp00sj0a583cbscra5",
                  "javaScript": "if (code1) {\n    eval(code1 + `\n        answer = sum(100, 45) === 145;\n    `);\n}\nelse {\n    answer = false;\n}",
                  "order": 0,
                  "createdAt": "2018-09-26T22:44:29.209Z",
                  "assessML": "<p>Create a function named sum that takes two parameters.</p>\n<p>Use the binary + operator to return the sum of these two parameters.</p>\n<p><br></p>\n<p>[code1]</p>\n<p><br></p>\n[solution1]\n    <p>+ is a binary operator, which means that it operates on two operands.</p>\n    <code-sample>\n        <template>\n            function sum(operand1, operand2) {\n                return operand1 + operand2;\n            }\n        </template>\n    </code-sample>\n    <p><br></p>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-08T00:00:59.673Z",
                  "id": "cjnnrf14v6ds50b19vapzpndv",
                  "javaScript": "if (code1) { eval(code1); answer = difference(5000, 3000) === 2000; } else { answer = false; }",
                  "order": 1,
                  "createdAt": "2018-10-24T22:58:04.543Z",
                  "assessML": "<p>Create a function named difference that takes two parameters.</p>\n<p>Use the binary - operator to return the difference of these two parameters.</p>\n<p>[code1]</p>[solution1]<p><code-sample><template>\nfunction difference(operand1, operand2) {\n   return operand1 - operand2; \n}\n\n</template></code-sample></p>[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-08T00:00:59.673Z",
                  "id": "cjnnrh9cz6dzl0b19wj3iislb",
                  "javaScript": "if (code1) {\n  const operand1 = 125125;\n  const operand2 = 285293;\n  eval(code1 + `\n    answer = result === operand1 * operand2;\n  `);\n}\nelse {\n  answer = false;\n}",
                  "order": 2,
                  "createdAt": "2018-10-24T22:59:48.515Z",
                  "assessML": "<p>Two operands, operand1 and operand2, will be provided in your code's environment.</p>\n<p>Use the binary * operator to store the product of the two operands in a variable named result.</p>\n<p>[code1]</p>[solution1]<code-sample><template>\nconst result = operand1 * operand2;\n\n</template></code-sample>[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-08T00:00:59.673Z",
                  "id": "cjnnriddb6e500b19hqq3csck",
                  "javaScript": "if (code1) {\n  const operand1 = 50000;\n  const operand2 = 100;\n  eval(code1 + `\n    answer = result === operand1 / operand2;\n  `);\n}\nelse {\n  answer = false;\n}",
                  "order": 3,
                  "createdAt": "2018-10-24T23:00:40.367Z",
                  "assessML": "<p>Two operands, operand1 and operand2, will be provided in your code's environment.</p>\n<p>Use the binary / operator to store the quotient of the two operands in a variable named result.</p>\n<p>[code1]</p>[solution1]<code-sample><template>\nconst result = operand1 / operand2;\n\n</template></code-sample>[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-08T00:00:59.673Z",
                  "id": "cjnnrkllx6eeq0b197ccnc39i",
                  "javaScript": "if (code1) {\n  const operand1 = 36236;\n  const operand2 = 155;\n  eval(code1 + `\n    answer = result === operand1 % operand2;\n  `);\n}\nelse {\n  answer = false;\n}",
                  "order": 4,
                  "createdAt": "2018-10-24T23:02:24.357Z",
                  "assessML": "<p>Two operands, operand1 and operand2, will be provided in your code's environment.</p>\n<p>Use the binary % operator to store the remainder of the quotient of the two operands in a variable named result.</p>\n<p>[code1]</p>[solution1]<code-sample><template>\nconst result = operand1 % operand2;\n\n</template></code-sample>[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-08T00:00:59.673Z",
                  "id": "cjnoxh3ue0w170a54oj5mpbu7",
                  "javaScript": "if (code1) {\n  const operand1 = 5125915;\n  eval(code1 + `\n    answer = result === operand1;\n  `);\n}\nelse {\n  answer = false;\n}",
                  "order": 5,
                  "createdAt": "2018-10-25T18:35:25.238Z",
                  "assessML": "<p>One operand, operand1, will be provided in your code's environment.</p>\n<p>Use the binary assignment operator to assign the value in operand1 to a variable named result.</p>\n<p><br></p>\n<p>[code1]</p>\n[solution1]\n  <code-sample>\n    <template>\n      const result = operand1;\n    </template>\n  </code-sample>\n[solution1]",
                  "verified": true
                }
              ],
              "id": "cjmjfg1sy003p0a58og8b8pjn",
              "order": 6,
              "createdAt": "2018-09-26T17:32:09.634Z",
              "title": "Operators"
            },
            {
              "updatedAt": "2018-09-26T17:38:37.826Z",
              "assessments": [
                {
                  "updatedAt": "2018-12-08T00:00:59.673Z",
                  "id": "cjmjqgp5f00rn0a58sij5nc3o",
                  "javaScript": "if (code1) {\n    eval(code1 + ' answer = control(50) === \\'You win!\\' && control(49) === \\'You lose!\\' && control(100) === \\'You win!\\' && control(3) === \\'You lose!\\'');\n}\nelse {\n    answer = false;\n}",
                  "order": 0,
                  "createdAt": "2018-09-26T22:40:35.667Z",
                  "assessML": "<p>Create a function named control that takes one parameter.</p>\n<p>If that parameter is a number greater than or equal to 50, return the string 'You win!'.</p>\n<p>If that parameter is a number less than 50, return the string 'You lose!'.</p>\n<p><br></p>\n<p>[code1]</p>\n<p><br></p>\n[solution1]\n    <code-sample>\n        <template>\n            function control(param) {\n                if (param >= 50) {\n                    return 'You win!';\n                }\n                else {\n                    return 'You lose!';\n                }\n            }\n        </template>\n    </code-sample>\n    <p><br></p>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-08T00:00:59.673Z",
                  "id": "cjnoxiwkj0w620a54kja6wvkr",
                  "javaScript": "if (code1) {\n  eval(code1);\n  answer = both(true, true) === 'Both' && both(true, false) === 'First' && both(false, true) === 'Second';\n}\nelse {\n  answer = false;\n}",
                  "order": 1,
                  "createdAt": "2018-10-25T18:36:49.123Z",
                  "assessML": "<p>Create a function named both that takes two parameters.</p>\n<p>If both parameters are true, return the string 'Both'.</p>\n<p>If only the first parameter is true, return the string 'First'.</p>\n<p>If only the second parameter is true, return the string 'Second'.</p>\n<p><br></p>\n<p>[code1]</p>\n[solution1]\n  <code-sample copy-clipboard-button type=\"javascript\">\n    <template preserve-content>\n function both(x, y) {\n        if (x && y) {\n          return 'Both';\n        }\n    \n        if (x && !y) {\n          return 'First';\n        }\n    \n        if (!x && y) {\n          return 'Second';\n        }\n      }\n    </template>\n  </code-sample>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-08T00:00:59.673Z",
                  "id": "cjnoxjw8y0w8o0a54b732tbtm",
                  "javaScript": "if (code1) {\n  eval(code1);\n  answer = falsy(false) === true && falsy(0) === true && falsy(undefined) === true && falsy(null) === true && falsy('') === true && falsy(NaN) === true;\n}\nelse {\n  answer = false;\n}",
                  "order": 2,
                  "createdAt": "2018-10-25T18:37:35.362Z",
                  "assessML": "<p>Create a function named falsy that takes one parameter.</p>\n<p>If the parameter is falsy, return true, otherwise return 'Not falsy'.</p>\n<p><br></p>\n<p>[code1]</p>\n[solution1]\n<code-sample>\n  <template>\n    // here are a few ways of solving this problem\n\n    function falsy(x) {\n      return !x || 'Not falsy';\n    }\n\n    // or\n\n    function falsy(x) {\n      return !x ? true : 'Not falsy';\n    }\n  </template>\n</code-sample>\n[solution1]",
                  "verified": true
                },
                {
                  "updatedAt": "2018-12-08T00:00:59.673Z",
                  "id": "cjnoxkt270wb60a54xxdqqezc",
                  "javaScript": "if (code1) {\n  eval(code1);\n  answer = truthy(1) === true && truthy(false) === 'Not truthy' && truthy(0) === 'Not truthy' && truthy(undefined) === 'Not truthy' && truthy(null) === 'Not truthy' && truthy('') === 'Not truthy' && truthy(NaN) === 'Not truthy';\n}\nelse {\n  answer = false;\n}",
                  "order": 3,
                  "createdAt": "2018-10-25T18:38:17.887Z",
                  "assessML": "<p>Create a function named truthy that takes one parameter.</p>\n<p>If the parameter is truthy, return true, otherwise return 'Not truthy'.</p>\n<p><br></p>\n<p>[code1]</p>\n[solution1]\n<code-sample>\n  <template>\n    function truthy(x) {\n      if (x) {\n        return true;\n      }\n      else {\n        return 'Not truthy';\n      }\n    }\n  </template>\n</code-sample>\n[solution1]",
                  "verified": true
                }
              ],
              "id": "cjmjfg77c003t0a58mvn1io1i",
              "order": 7,
              "createdAt": "2018-09-26T17:32:16.632Z",
              "title": "Control flow"
            },
            {
              "updatedAt": "2018-09-26T17:38:45.823Z",
              "assessments": [
                {
                  "updatedAt": "2018-12-08T00:00:59.673Z",
                  "id": "cjmjqoul400sz0a58l0fzounv",
                  "javaScript": "if (code1) {\n    eval(code1 + `\n        try {\n            frozen = true;\n            answer = false;\n        }\n        catch(error) {\n            answer = true;\n        }\n    `);\n}\nelse {\n    answer = false;\n}",
                  "order": 0,
                  "createdAt": "2018-09-26T22:46:55.959Z",
                  "assessML": "<p>Use a constant declaration to declare and define an immutable variable named frozen.</p>\n<p><br></p>\n<p>[code1]</p>\n<p><br></p>\n[solution1]\n    <p>The value of the variable can be whatever you want, but you must use the const declaration.</p>\n    <code-sample>\n        <template>\n            const frozen = 'I am immutable';\n        </template>\n    </code-sample>\n    <p><br></p>\n[solution1]",
                  "verified": true
                }
              ],
              "id": "cjmjfgceo003x0a58wjdl2qu4",
              "order": 8,
              "createdAt": "2018-09-26T17:32:23.375Z",
              "title": "Variables"
            },
            {
              "updatedAt": "2018-09-26T17:38:56.309Z",
              "assessments": [
                {
                  "updatedAt": "2018-12-08T00:00:59.673Z",
                  "id": "cjmjqmpp100sn0a58jcdtjmwz",
                  "javaScript": "autoPostMessage = false;\n\nif (code1) {\n    eval(code1);\n\n    let before999 = true;\n\n    setTimeout(() => {\n        before999 = false;\n    }, 999);\n\n    timeout().then(() => {\n        if (before999 === true) {\n            postMessage({\n                answer: false\n            });\n        }\n        else {\n            postMessage({\n                answer: true\n            });\n        }\n    });\n\n    setTimeout(() => {\n        postMessage({\n            answer: false\n        });\n    }, 1001);\n}\nelse {\n    postMessage({\n        answer: false\n    });\n}",
                  "order": 0,
                  "createdAt": "2018-09-26T22:45:16.308Z",
                  "assessML": "<p>Create a function named timeout that returns a promise that resolves just after 1000 milliseconds.</p>\n<p><br></p>\n<p>[code1]</p>\n<p><br></p>\n[solution1]\n    <code-sample>\n        <template>\n            function timeout() {\n                return new Promise((resolve) => {\n                    setTimeout(() => {\n                        resolve();\n                    }, 1000);\n                });\n            }\n        </template>\n    </code-sample>\n    <p><br></p>\n[solution1]",
                  "verified": true
                }
              ],
              "id": "cjmjfgh6s00410a58wkxmn0ei",
              "order": 9,
              "createdAt": "2018-09-26T17:32:29.572Z",
              "title": "Promises"
            },
            {
              "updatedAt": "2018-09-26T17:39:05.300Z",
              "assessments": [
                {
                  "updatedAt": "2018-12-08T00:00:59.673Z",
                  "id": "cjmjqaw8i00qr0a58bd6yrk1r",
                  "javaScript": "if (code1) {\n    eval(code1 + `\n        answer = typeof wait().then === 'function';\n    `);\n}\nelse {\n    answer = false;\n}",
                  "order": 0,
                  "createdAt": "2018-09-26T22:36:04.914Z",
                  "assessML": "<p>Create an asynchronous function called wait.</p>\n<p><br></p>\n<p>[code1]</p>\n<p><br></p>\n[solution1]\n    <code-sample>\n        <template>\n            async function wait() {}\n        </template>\n    </code-sample>\n    <p><br></p>\n[solution1]",
                  "verified": true
                }
              ],
              "id": "cjmjfgldy00450a581geup4cj",
              "order": 10,
              "createdAt": "2018-09-26T17:32:35.013Z",
              "title": "async/await"
            },
            {
              "updatedAt": "2018-09-26T17:39:15.202Z",
              "assessments": [
                {
                  "updatedAt": "2018-12-08T00:00:59.673Z",
                  "id": "cjmjqkiz300sb0a58gm4wu4b3",
                  "javaScript": "if (code1) {\n    eval(code1 + `\n        const theGenerator = infiniteSum();\n        answer = theGenerator.next().value === 0 && theGenerator.next().value === 1 && theGenerator.next().value === 2 && theGenerator.next().value === 3;\n    `);\n}\nelse {\n    answer = false;\n}",
                  "order": 0,
                  "createdAt": "2018-09-26T22:43:34.287Z",
                  "assessML": "<p>Write a generator function called infiniteSum.</p>\n<p>When the generator's next method is called, the result should have value 0, then 1, then 2 and repeat the pattern to infinity.</p>\n<p><br></p>\n<p>[code1]</p>\n<p><br></p>\n[solution1]\n    <code-sample>\n        <template>\n            function* infiniteSum() {\n                for (let i=0; i < Infinity; i++) {\n                    yield i;\n                }\n            }\n        </template>\n    </code-sample>\n    <p><br></p>\n[solution1]",
                  "verified": true
                }
              ],
              "id": "cjmjfgqo200490a58sd3yosgk",
              "order": 11,
              "createdAt": "2018-09-26T17:32:41.858Z",
              "title": "Generators"
            },
            {
              "updatedAt": "2018-09-26T17:39:24.776Z",
              "assessments": [
                {
                  "updatedAt": "2018-12-08T00:00:59.673Z",
                  "id": "cjmjqnze900sv0a58z1lp7vj5",
                  "javaScript": "answer = input1.toLowerCase() === 'hoisting';",
                  "order": 0,
                  "createdAt": "2018-09-26T22:46:15.536Z",
                  "assessML": "<p>The ability for a JavaScript function to be used before being declared is called [input1].</p>\n<p><br></p>\n[solution1]\n    <p><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Hoisting\">Hoisting</a></p>\n    <p><br></p>\n[solution1]",
                  "verified": true
                }
              ],
              "id": "cjmjfgud5004d0a58f0wjzwfc",
              "order": 12,
              "createdAt": "2018-09-26T17:32:46.649Z",
              "title": "Scope"
            },
            {
              "updatedAt": "2018-09-26T17:39:34.542Z",
              "assessments": [
                {
                  "updatedAt": "2018-12-08T00:00:59.673Z",
                  "id": "cjmjqflav00rj0a58ubj0rfq9",
                  "javaScript": "if (code1) {\n    eval(code1 + ' answer = closer() === true');\n}\nelse {\n    answer = false;\n}",
                  "order": 0,
                  "createdAt": "2018-09-26T22:39:44.023Z",
                  "assessML": "<p>Create a variable named closed and set it to true.</p>\n<p>Create a function named closer that returns closed through a closure.</p>\n<p><br></p>\n<p>[code1]</p>\n<p><br></p>\n[solution1]\n    <code-sample>\n        <template>\n            const closed = true;\n\n            function closer() {\n                return closed;\n            }\n        </template>\n    </code-sample>\n    <p><br></p>\n[solution1]",
                  "verified": true
                }
              ],
              "id": "cjmjfh0ym004h0a584k8vv6k1",
              "order": 13,
              "createdAt": "2018-09-26T17:32:55.198Z",
              "title": "Closures"
            },
            {
              "updatedAt": "2018-09-26T17:39:44.442Z",
              "assessments": [
                {
                  "updatedAt": "2018-12-08T00:00:59.673Z",
                  "id": "cjmjqbn3500qv0a58p6gsv93y",
                  "javaScript": "if (code1) {\n    eval(code1 + ' answer = executeCallback(() => true) === true;');\n}\nelse {\n    answer = false;\n}",
                  "order": 0,
                  "createdAt": "2018-09-26T22:36:39.713Z",
                  "assessML": "<p>Create a function named executeCallback that takes a callback function as a parameter and returns the result of that callback.</p>\n<p><br></p>\n<p>[code1]</p>\n<p><br></p>\n[solution1]\n    <code-sample>\n        <template>\n            function executeCallback(callback) {\n                return callback();\n            }\n        </template>\n    </code-sample>\n    <p><br></p>\n[solution1]",
                  "verified": true
                }
              ],
              "id": "cjmjfh4kf004l0a58ncl5jfta",
              "order": 14,
              "createdAt": "2018-09-26T17:32:59.871Z",
              "title": "Callbacks"
            },
            {
              "updatedAt": "2018-09-26T17:39:51.789Z",
              "assessments": [
                {
                  "updatedAt": "2018-12-08T00:00:59.673Z",
                  "id": "cjmjqnefz00sr0a58p9jkmot5",
                  "javaScript": "if (code1) {\n    eval(code1 + `\n        answer = betterBank.balance === 200;\n    `);\n}\nelse {\n    answer = false;\n}",
                  "order": 0,
                  "createdAt": "2018-09-26T22:45:48.382Z",
                  "assessML": "<p>Create an object named bank with one property named balance with a value of 100.</p>\n<p>Create a proxy to that object, call it betterBank.</p>\n<p>Whenever the balance property of betterBank is accessed, add 100 to it.</p>\n<p><br></p>\n<p>[code1]</p>\n<p><br></p>\n[solution1]\n    <code-sample>\n        <template>\n            const bank = {\n                balance: 100\n            };\n\n            const betterBank = new Proxy(bank, {\n                get: (target, prop, receiver) => {\n                    if (prop === 'balance') {\n                        return target[prop] + 100;\n                    }\n                    else {\n                        return target[prop];\n                    }\n                }\n            });\n        </template>\n    </code-sample>\n    <p><br></p>\n[solution1]",
                  "verified": true
                }
              ],
              "id": "cjmjfh7zf004p0a58mn1h89gt",
              "order": 15,
              "createdAt": "2018-09-26T17:33:04.298Z",
              "title": "Proxies"
            }
          ],
          "id": "cjmjfd1ag002y0a588gnnmbwt",
          "order": 0,
          "createdAt": "2018-09-26T17:29:49.000Z",
          "title": "JavaScript"
        }
      ]
    }
  }