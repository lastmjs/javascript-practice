// Code generated by Prisma (prisma@1.21.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  answerAttempt: (where?: AnswerAttemptWhereInput) => Promise<boolean>;
  assessment: (where?: AssessmentWhereInput) => Promise<boolean>;
  assessmentInfo: (where?: AssessmentInfoWhereInput) => Promise<boolean>;
  concept: (where?: ConceptWhereInput) => Promise<boolean>;
  constant: (where?: ConstantWhereInput) => Promise<boolean>;
  course: (where?: CourseWhereInput) => Promise<boolean>;
  feedbackSubmission: (
    where?: FeedbackSubmissionWhereInput
  ) => Promise<boolean>;
  tokenReward: (where?: TokenRewardWhereInput) => Promise<boolean>;
  tokenTransaction: (where?: TokenTransactionWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  answerAttempt: (where: AnswerAttemptWhereUniqueInput) => AnswerAttemptPromise;
  answerAttempts: (
    args?: {
      where?: AnswerAttemptWhereInput;
      orderBy?: AnswerAttemptOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<AnswerAttempt>;
  answerAttemptsConnection: (
    args?: {
      where?: AnswerAttemptWhereInput;
      orderBy?: AnswerAttemptOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => AnswerAttemptConnectionPromise;
  assessment: (where: AssessmentWhereUniqueInput) => AssessmentPromise;
  assessments: (
    args?: {
      where?: AssessmentWhereInput;
      orderBy?: AssessmentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Assessment>;
  assessmentsConnection: (
    args?: {
      where?: AssessmentWhereInput;
      orderBy?: AssessmentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => AssessmentConnectionPromise;
  assessmentInfo: (
    where: AssessmentInfoWhereUniqueInput
  ) => AssessmentInfoPromise;
  assessmentInfoes: (
    args?: {
      where?: AssessmentInfoWhereInput;
      orderBy?: AssessmentInfoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<AssessmentInfo>;
  assessmentInfoesConnection: (
    args?: {
      where?: AssessmentInfoWhereInput;
      orderBy?: AssessmentInfoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => AssessmentInfoConnectionPromise;
  concept: (where: ConceptWhereUniqueInput) => ConceptPromise;
  concepts: (
    args?: {
      where?: ConceptWhereInput;
      orderBy?: ConceptOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Concept>;
  conceptsConnection: (
    args?: {
      where?: ConceptWhereInput;
      orderBy?: ConceptOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ConceptConnectionPromise;
  constant: (where: ConstantWhereUniqueInput) => ConstantPromise;
  constants: (
    args?: {
      where?: ConstantWhereInput;
      orderBy?: ConstantOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Constant>;
  constantsConnection: (
    args?: {
      where?: ConstantWhereInput;
      orderBy?: ConstantOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ConstantConnectionPromise;
  course: (where: CourseWhereUniqueInput) => CoursePromise;
  courses: (
    args?: {
      where?: CourseWhereInput;
      orderBy?: CourseOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Course>;
  coursesConnection: (
    args?: {
      where?: CourseWhereInput;
      orderBy?: CourseOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CourseConnectionPromise;
  feedbackSubmission: (
    where: FeedbackSubmissionWhereUniqueInput
  ) => FeedbackSubmissionPromise;
  feedbackSubmissions: (
    args?: {
      where?: FeedbackSubmissionWhereInput;
      orderBy?: FeedbackSubmissionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<FeedbackSubmission>;
  feedbackSubmissionsConnection: (
    args?: {
      where?: FeedbackSubmissionWhereInput;
      orderBy?: FeedbackSubmissionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FeedbackSubmissionConnectionPromise;
  tokenReward: (where: TokenRewardWhereUniqueInput) => TokenRewardPromise;
  tokenRewards: (
    args?: {
      where?: TokenRewardWhereInput;
      orderBy?: TokenRewardOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<TokenReward>;
  tokenRewardsConnection: (
    args?: {
      where?: TokenRewardWhereInput;
      orderBy?: TokenRewardOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => TokenRewardConnectionPromise;
  tokenTransaction: (
    where: TokenTransactionWhereUniqueInput
  ) => TokenTransactionPromise;
  tokenTransactions: (
    args?: {
      where?: TokenTransactionWhereInput;
      orderBy?: TokenTransactionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<TokenTransaction>;
  tokenTransactionsConnection: (
    args?: {
      where?: TokenTransactionWhereInput;
      orderBy?: TokenTransactionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => TokenTransactionConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAnswerAttempt: (data: AnswerAttemptCreateInput) => AnswerAttemptPromise;
  updateAnswerAttempt: (
    args: {
      data: AnswerAttemptUpdateInput;
      where: AnswerAttemptWhereUniqueInput;
    }
  ) => AnswerAttemptPromise;
  updateManyAnswerAttempts: (
    args: {
      data: AnswerAttemptUpdateManyMutationInput;
      where?: AnswerAttemptWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertAnswerAttempt: (
    args: {
      where: AnswerAttemptWhereUniqueInput;
      create: AnswerAttemptCreateInput;
      update: AnswerAttemptUpdateInput;
    }
  ) => AnswerAttemptPromise;
  deleteAnswerAttempt: (
    where: AnswerAttemptWhereUniqueInput
  ) => AnswerAttemptPromise;
  deleteManyAnswerAttempts: (
    where?: AnswerAttemptWhereInput
  ) => BatchPayloadPromise;
  createAssessment: (data: AssessmentCreateInput) => AssessmentPromise;
  updateAssessment: (
    args: { data: AssessmentUpdateInput; where: AssessmentWhereUniqueInput }
  ) => AssessmentPromise;
  updateManyAssessments: (
    args: {
      data: AssessmentUpdateManyMutationInput;
      where?: AssessmentWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertAssessment: (
    args: {
      where: AssessmentWhereUniqueInput;
      create: AssessmentCreateInput;
      update: AssessmentUpdateInput;
    }
  ) => AssessmentPromise;
  deleteAssessment: (where: AssessmentWhereUniqueInput) => AssessmentPromise;
  deleteManyAssessments: (where?: AssessmentWhereInput) => BatchPayloadPromise;
  createAssessmentInfo: (
    data: AssessmentInfoCreateInput
  ) => AssessmentInfoPromise;
  updateAssessmentInfo: (
    args: {
      data: AssessmentInfoUpdateInput;
      where: AssessmentInfoWhereUniqueInput;
    }
  ) => AssessmentInfoPromise;
  updateManyAssessmentInfoes: (
    args: {
      data: AssessmentInfoUpdateManyMutationInput;
      where?: AssessmentInfoWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertAssessmentInfo: (
    args: {
      where: AssessmentInfoWhereUniqueInput;
      create: AssessmentInfoCreateInput;
      update: AssessmentInfoUpdateInput;
    }
  ) => AssessmentInfoPromise;
  deleteAssessmentInfo: (
    where: AssessmentInfoWhereUniqueInput
  ) => AssessmentInfoPromise;
  deleteManyAssessmentInfoes: (
    where?: AssessmentInfoWhereInput
  ) => BatchPayloadPromise;
  createConcept: (data: ConceptCreateInput) => ConceptPromise;
  updateConcept: (
    args: { data: ConceptUpdateInput; where: ConceptWhereUniqueInput }
  ) => ConceptPromise;
  updateManyConcepts: (
    args: { data: ConceptUpdateManyMutationInput; where?: ConceptWhereInput }
  ) => BatchPayloadPromise;
  upsertConcept: (
    args: {
      where: ConceptWhereUniqueInput;
      create: ConceptCreateInput;
      update: ConceptUpdateInput;
    }
  ) => ConceptPromise;
  deleteConcept: (where: ConceptWhereUniqueInput) => ConceptPromise;
  deleteManyConcepts: (where?: ConceptWhereInput) => BatchPayloadPromise;
  createConstant: (data: ConstantCreateInput) => ConstantPromise;
  updateConstant: (
    args: { data: ConstantUpdateInput; where: ConstantWhereUniqueInput }
  ) => ConstantPromise;
  updateManyConstants: (
    args: { data: ConstantUpdateManyMutationInput; where?: ConstantWhereInput }
  ) => BatchPayloadPromise;
  upsertConstant: (
    args: {
      where: ConstantWhereUniqueInput;
      create: ConstantCreateInput;
      update: ConstantUpdateInput;
    }
  ) => ConstantPromise;
  deleteConstant: (where: ConstantWhereUniqueInput) => ConstantPromise;
  deleteManyConstants: (where?: ConstantWhereInput) => BatchPayloadPromise;
  createCourse: (data: CourseCreateInput) => CoursePromise;
  updateCourse: (
    args: { data: CourseUpdateInput; where: CourseWhereUniqueInput }
  ) => CoursePromise;
  updateManyCourses: (
    args: { data: CourseUpdateManyMutationInput; where?: CourseWhereInput }
  ) => BatchPayloadPromise;
  upsertCourse: (
    args: {
      where: CourseWhereUniqueInput;
      create: CourseCreateInput;
      update: CourseUpdateInput;
    }
  ) => CoursePromise;
  deleteCourse: (where: CourseWhereUniqueInput) => CoursePromise;
  deleteManyCourses: (where?: CourseWhereInput) => BatchPayloadPromise;
  createFeedbackSubmission: (
    data: FeedbackSubmissionCreateInput
  ) => FeedbackSubmissionPromise;
  updateFeedbackSubmission: (
    args: {
      data: FeedbackSubmissionUpdateInput;
      where: FeedbackSubmissionWhereUniqueInput;
    }
  ) => FeedbackSubmissionPromise;
  updateManyFeedbackSubmissions: (
    args: {
      data: FeedbackSubmissionUpdateManyMutationInput;
      where?: FeedbackSubmissionWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertFeedbackSubmission: (
    args: {
      where: FeedbackSubmissionWhereUniqueInput;
      create: FeedbackSubmissionCreateInput;
      update: FeedbackSubmissionUpdateInput;
    }
  ) => FeedbackSubmissionPromise;
  deleteFeedbackSubmission: (
    where: FeedbackSubmissionWhereUniqueInput
  ) => FeedbackSubmissionPromise;
  deleteManyFeedbackSubmissions: (
    where?: FeedbackSubmissionWhereInput
  ) => BatchPayloadPromise;
  createTokenReward: (data: TokenRewardCreateInput) => TokenRewardPromise;
  updateTokenReward: (
    args: { data: TokenRewardUpdateInput; where: TokenRewardWhereUniqueInput }
  ) => TokenRewardPromise;
  updateManyTokenRewards: (
    args: {
      data: TokenRewardUpdateManyMutationInput;
      where?: TokenRewardWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertTokenReward: (
    args: {
      where: TokenRewardWhereUniqueInput;
      create: TokenRewardCreateInput;
      update: TokenRewardUpdateInput;
    }
  ) => TokenRewardPromise;
  deleteTokenReward: (where: TokenRewardWhereUniqueInput) => TokenRewardPromise;
  deleteManyTokenRewards: (
    where?: TokenRewardWhereInput
  ) => BatchPayloadPromise;
  createTokenTransaction: (
    data: TokenTransactionCreateInput
  ) => TokenTransactionPromise;
  updateTokenTransaction: (
    args: {
      data: TokenTransactionUpdateInput;
      where: TokenTransactionWhereUniqueInput;
    }
  ) => TokenTransactionPromise;
  updateManyTokenTransactions: (
    args: {
      data: TokenTransactionUpdateManyMutationInput;
      where?: TokenTransactionWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertTokenTransaction: (
    args: {
      where: TokenTransactionWhereUniqueInput;
      create: TokenTransactionCreateInput;
      update: TokenTransactionUpdateInput;
    }
  ) => TokenTransactionPromise;
  deleteTokenTransaction: (
    where: TokenTransactionWhereUniqueInput
  ) => TokenTransactionPromise;
  deleteManyTokenTransactions: (
    where?: TokenTransactionWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  answerAttempt: (
    where?: AnswerAttemptSubscriptionWhereInput
  ) => AnswerAttemptSubscriptionPayloadSubscription;
  assessment: (
    where?: AssessmentSubscriptionWhereInput
  ) => AssessmentSubscriptionPayloadSubscription;
  assessmentInfo: (
    where?: AssessmentInfoSubscriptionWhereInput
  ) => AssessmentInfoSubscriptionPayloadSubscription;
  concept: (
    where?: ConceptSubscriptionWhereInput
  ) => ConceptSubscriptionPayloadSubscription;
  constant: (
    where?: ConstantSubscriptionWhereInput
  ) => ConstantSubscriptionPayloadSubscription;
  course: (
    where?: CourseSubscriptionWhereInput
  ) => CourseSubscriptionPayloadSubscription;
  feedbackSubmission: (
    where?: FeedbackSubmissionSubscriptionWhereInput
  ) => FeedbackSubmissionSubscriptionPayloadSubscription;
  tokenReward: (
    where?: TokenRewardSubscriptionWhereInput
  ) => TokenRewardSubscriptionPayloadSubscription;
  tokenTransaction: (
    where?: TokenTransactionSubscriptionWhereInput
  ) => TokenTransactionSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type CourseOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "title_ASC"
  | "title_DESC"
  | "order_ASC"
  | "order_DESC";

export type AssessmentInfoOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "answeredCorrectly_ASC"
  | "answeredCorrectly_DESC"
  | "solutionViewed_ASC"
  | "solutionViewed_DESC"
  | "sourceCodeViewed_ASC"
  | "sourceCodeViewed_DESC";

export type ConstantOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "key_ASC"
  | "key_DESC"
  | "value_ASC"
  | "value_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "tokens_ASC"
  | "tokens_DESC"
  | "termsAcceptedDate_ASC"
  | "termsAcceptedDate_DESC"
  | "termsAcceptedVersion_ASC"
  | "termsAcceptedVersion_DESC";

export type AssessmentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "assessML_ASC"
  | "assessML_DESC"
  | "javaScript_ASC"
  | "javaScript_DESC"
  | "order_ASC"
  | "order_DESC"
  | "verified_ASC"
  | "verified_DESC";

export type ConceptOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "title_ASC"
  | "title_DESC"
  | "order_ASC"
  | "order_DESC"
  | "level_ASC"
  | "level_DESC";

export type AnswerAttemptOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "correct_ASC"
  | "correct_DESC";

export type ConstantKey = "TERMS_AND_PRIVACY_VERSION" | "TOKEN_PRICE";

export type TokenTransactionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "amount_ASC"
  | "amount_DESC"
  | "type_ASC"
  | "type_DESC"
  | "description_ASC"
  | "description_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type FeedbackSubmissionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "text_ASC"
  | "text_DESC"
  | "open_ASC"
  | "open_DESC"
  | "description_ASC"
  | "description_DESC";

export type TokenTransactionType =
  | "ANSWER_CORRECT"
  | "ANSWER_INCORRECT"
  | "VIEW_SOLUTION"
  | "VIEW_SOURCE_CODE"
  | "ASSESSMENT_SUBMITTED"
  | "FEEDBACK_SUBMITTED"
  | "INITIAL_ENDOWMENT"
  | "TOKEN_PURCHASE";

export type TokenRewardOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "type_ASC"
  | "type_DESC"
  | "amount_ASC"
  | "amount_DESC";

export interface AssessmentInfoUpdateWithoutAnswerAttemptsDataInput {
  user?: UserUpdateOneRequiredWithoutAssessmentInfosInput;
  assessment?: AssessmentUpdateOneRequiredInput;
  answeredCorrectly?: Boolean;
  solutionViewed?: Boolean;
  sourceCodeViewed?: Boolean;
}

export type AnswerAttemptWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CourseUpdateOneRequiredWithoutConceptsInput {
  create?: CourseCreateWithoutConceptsInput;
  update?: CourseUpdateWithoutConceptsDataInput;
  upsert?: CourseUpsertWithoutConceptsInput;
  connect?: CourseWhereUniqueInput;
}

export interface AnswerAttemptWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  assessmentInfo?: AssessmentInfoWhereInput;
  correct?: Boolean;
  correct_not?: Boolean;
  AND?: AnswerAttemptWhereInput[] | AnswerAttemptWhereInput;
  OR?: AnswerAttemptWhereInput[] | AnswerAttemptWhereInput;
  NOT?: AnswerAttemptWhereInput[] | AnswerAttemptWhereInput;
}

export interface AssessmentInfoCreateOneWithoutAnswerAttemptsInput {
  create?: AssessmentInfoCreateWithoutAnswerAttemptsInput;
  connect?: AssessmentInfoWhereUniqueInput;
}

export interface AssessmentUpdateInput {
  concept?: ConceptUpdateOneRequiredWithoutAssessmentsInput;
  assessML?: String;
  javaScript?: String;
  order?: Int;
  verified?: Boolean;
  author?: UserUpdateOneRequiredWithoutAssessmentsInput;
}

export interface AssessmentInfoCreateWithoutAnswerAttemptsInput {
  user: UserCreateOneWithoutAssessmentInfosInput;
  assessment: AssessmentCreateOneInput;
  answeredCorrectly: Boolean;
  solutionViewed: Boolean;
  sourceCodeViewed: Boolean;
}

export interface CourseUpdateWithoutConceptsDataInput {
  title?: String;
  order?: Int;
}

export interface UserCreateOneWithoutAssessmentInfosInput {
  create?: UserCreateWithoutAssessmentInfosInput;
  connect?: UserWhereUniqueInput;
}

export interface CourseWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  concepts_every?: ConceptWhereInput;
  concepts_some?: ConceptWhereInput;
  concepts_none?: ConceptWhereInput;
  order?: Int;
  order_not?: Int;
  order_in?: Int[] | Int;
  order_not_in?: Int[] | Int;
  order_lt?: Int;
  order_lte?: Int;
  order_gt?: Int;
  order_gte?: Int;
  AND?: CourseWhereInput[] | CourseWhereInput;
  OR?: CourseWhereInput[] | CourseWhereInput;
  NOT?: CourseWhereInput[] | CourseWhereInput;
}

export interface UserCreateWithoutAssessmentInfosInput {
  email: String;
  password: String;
  tokens: Int;
  termsAcceptedDate?: DateTimeInput;
  termsAcceptedVersion?: String;
  assessments?: AssessmentCreateManyWithoutAuthorInput;
}

export interface TokenTransactionSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TokenTransactionWhereInput;
  AND?:
    | TokenTransactionSubscriptionWhereInput[]
    | TokenTransactionSubscriptionWhereInput;
  OR?:
    | TokenTransactionSubscriptionWhereInput[]
    | TokenTransactionSubscriptionWhereInput;
  NOT?:
    | TokenTransactionSubscriptionWhereInput[]
    | TokenTransactionSubscriptionWhereInput;
}

export interface AssessmentCreateManyWithoutAuthorInput {
  create?:
    | AssessmentCreateWithoutAuthorInput[]
    | AssessmentCreateWithoutAuthorInput;
  connect?: AssessmentWhereUniqueInput[] | AssessmentWhereUniqueInput;
}

export interface FeedbackSubmissionSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: FeedbackSubmissionWhereInput;
  AND?:
    | FeedbackSubmissionSubscriptionWhereInput[]
    | FeedbackSubmissionSubscriptionWhereInput;
  OR?:
    | FeedbackSubmissionSubscriptionWhereInput[]
    | FeedbackSubmissionSubscriptionWhereInput;
  NOT?:
    | FeedbackSubmissionSubscriptionWhereInput[]
    | FeedbackSubmissionSubscriptionWhereInput;
}

export interface AssessmentCreateWithoutAuthorInput {
  concept: ConceptCreateOneWithoutAssessmentsInput;
  assessML: String;
  javaScript: String;
  order: Int;
  verified: Boolean;
}

export type AssessmentWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ConceptCreateOneWithoutAssessmentsInput {
  create?: ConceptCreateWithoutAssessmentsInput;
  connect?: ConceptWhereUniqueInput;
}

export interface ConceptSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ConceptWhereInput;
  AND?: ConceptSubscriptionWhereInput[] | ConceptSubscriptionWhereInput;
  OR?: ConceptSubscriptionWhereInput[] | ConceptSubscriptionWhereInput;
  NOT?: ConceptSubscriptionWhereInput[] | ConceptSubscriptionWhereInput;
}

export interface ConceptCreateWithoutAssessmentsInput {
  title: String;
  course: CourseCreateOneWithoutConceptsInput;
  order: Int;
  level?: Int;
  parent?: ConceptCreateOneInput;
}

export type AssessmentInfoWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CourseCreateOneWithoutConceptsInput {
  create?: CourseCreateWithoutConceptsInput;
  connect?: CourseWhereUniqueInput;
}

export interface AnswerAttemptSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: AnswerAttemptWhereInput;
  AND?:
    | AnswerAttemptSubscriptionWhereInput[]
    | AnswerAttemptSubscriptionWhereInput;
  OR?:
    | AnswerAttemptSubscriptionWhereInput[]
    | AnswerAttemptSubscriptionWhereInput;
  NOT?:
    | AnswerAttemptSubscriptionWhereInput[]
    | AnswerAttemptSubscriptionWhereInput;
}

export interface CourseCreateWithoutConceptsInput {
  title: String;
  order: Int;
}

export type ConceptWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ConceptCreateOneInput {
  create?: ConceptCreateInput;
  connect?: ConceptWhereUniqueInput;
}

export interface TokenTransactionUpdateManyMutationInput {
  amount?: Int;
  type?: TokenTransactionType;
  description?: String;
}

export interface ConceptCreateInput {
  title: String;
  course: CourseCreateOneWithoutConceptsInput;
  assessments?: AssessmentCreateManyWithoutConceptInput;
  order: Int;
  level?: Int;
  parent?: ConceptCreateOneInput;
}

export type ConstantWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  key?: ConstantKey;
}>;

export interface AssessmentCreateManyWithoutConceptInput {
  create?:
    | AssessmentCreateWithoutConceptInput[]
    | AssessmentCreateWithoutConceptInput;
  connect?: AssessmentWhereUniqueInput[] | AssessmentWhereUniqueInput;
}

export interface TokenTransactionCreateInput {
  user: UserCreateOneInput;
  amount: Int;
  type: TokenTransactionType;
  description: String;
}

export interface AssessmentCreateWithoutConceptInput {
  assessML: String;
  javaScript: String;
  order: Int;
  verified: Boolean;
  author: UserCreateOneWithoutAssessmentsInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  tokens?: Int;
  tokens_not?: Int;
  tokens_in?: Int[] | Int;
  tokens_not_in?: Int[] | Int;
  tokens_lt?: Int;
  tokens_lte?: Int;
  tokens_gt?: Int;
  tokens_gte?: Int;
  assessmentInfos_every?: AssessmentInfoWhereInput;
  assessmentInfos_some?: AssessmentInfoWhereInput;
  assessmentInfos_none?: AssessmentInfoWhereInput;
  termsAcceptedDate?: DateTimeInput;
  termsAcceptedDate_not?: DateTimeInput;
  termsAcceptedDate_in?: DateTimeInput[] | DateTimeInput;
  termsAcceptedDate_not_in?: DateTimeInput[] | DateTimeInput;
  termsAcceptedDate_lt?: DateTimeInput;
  termsAcceptedDate_lte?: DateTimeInput;
  termsAcceptedDate_gt?: DateTimeInput;
  termsAcceptedDate_gte?: DateTimeInput;
  termsAcceptedVersion?: String;
  termsAcceptedVersion_not?: String;
  termsAcceptedVersion_in?: String[] | String;
  termsAcceptedVersion_not_in?: String[] | String;
  termsAcceptedVersion_lt?: String;
  termsAcceptedVersion_lte?: String;
  termsAcceptedVersion_gt?: String;
  termsAcceptedVersion_gte?: String;
  termsAcceptedVersion_contains?: String;
  termsAcceptedVersion_not_contains?: String;
  termsAcceptedVersion_starts_with?: String;
  termsAcceptedVersion_not_starts_with?: String;
  termsAcceptedVersion_ends_with?: String;
  termsAcceptedVersion_not_ends_with?: String;
  assessments_every?: AssessmentWhereInput;
  assessments_some?: AssessmentWhereInput;
  assessments_none?: AssessmentWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface UserCreateOneWithoutAssessmentsInput {
  create?: UserCreateWithoutAssessmentsInput;
  connect?: UserWhereUniqueInput;
}

export interface TokenRewardUpdateInput {
  type?: TokenTransactionType;
  amount?: Int;
}

export interface UserCreateWithoutAssessmentsInput {
  email: String;
  password: String;
  tokens: Int;
  assessmentInfos?: AssessmentInfoCreateManyWithoutUserInput;
  termsAcceptedDate?: DateTimeInput;
  termsAcceptedVersion?: String;
}

export type CourseWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface AssessmentInfoCreateManyWithoutUserInput {
  create?:
    | AssessmentInfoCreateWithoutUserInput[]
    | AssessmentInfoCreateWithoutUserInput;
  connect?: AssessmentInfoWhereUniqueInput[] | AssessmentInfoWhereUniqueInput;
}

export interface FeedbackSubmissionUpdateManyMutationInput {
  text?: String;
  open?: Boolean;
  description?: String;
}

export interface AssessmentInfoCreateWithoutUserInput {
  assessment: AssessmentCreateOneInput;
  answeredCorrectly: Boolean;
  solutionViewed: Boolean;
  sourceCodeViewed: Boolean;
  answerAttempts?: AnswerAttemptCreateManyWithoutAssessmentInfoInput;
}

export interface UserUpdateDataInput {
  email?: String;
  password?: String;
  tokens?: Int;
  assessmentInfos?: AssessmentInfoUpdateManyWithoutUserInput;
  termsAcceptedDate?: DateTimeInput;
  termsAcceptedVersion?: String;
  assessments?: AssessmentUpdateManyWithoutAuthorInput;
}

export interface AssessmentCreateOneInput {
  create?: AssessmentCreateInput;
  connect?: AssessmentWhereUniqueInput;
}

export interface UserUpdateOneRequiredInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  connect?: UserWhereUniqueInput;
}

export interface AssessmentCreateInput {
  concept: ConceptCreateOneWithoutAssessmentsInput;
  assessML: String;
  javaScript: String;
  order: Int;
  verified: Boolean;
  author: UserCreateOneWithoutAssessmentsInput;
}

export interface FeedbackSubmissionUpdateInput {
  user?: UserUpdateOneRequiredInput;
  text?: String;
  open?: Boolean;
  description?: String;
}

export interface AnswerAttemptCreateManyWithoutAssessmentInfoInput {
  create?:
    | AnswerAttemptCreateWithoutAssessmentInfoInput[]
    | AnswerAttemptCreateWithoutAssessmentInfoInput;
  connect?: AnswerAttemptWhereUniqueInput[] | AnswerAttemptWhereUniqueInput;
}

export interface UserCreateOneInput {
  create?: UserCreateInput;
  connect?: UserWhereUniqueInput;
}

export interface AnswerAttemptCreateWithoutAssessmentInfoInput {
  correct: Boolean;
}

export type TokenRewardWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  type?: TokenTransactionType;
}>;

export interface AnswerAttemptUpdateInput {
  assessmentInfo?: AssessmentInfoUpdateOneRequiredWithoutAnswerAttemptsInput;
  correct?: Boolean;
}

export interface ConceptUpsertWithWhereUniqueWithoutCourseInput {
  where: ConceptWhereUniqueInput;
  update: ConceptUpdateWithoutCourseDataInput;
  create: ConceptCreateWithoutCourseInput;
}

export interface AssessmentInfoUpdateOneRequiredWithoutAnswerAttemptsInput {
  create?: AssessmentInfoCreateWithoutAnswerAttemptsInput;
  update?: AssessmentInfoUpdateWithoutAnswerAttemptsDataInput;
  upsert?: AssessmentInfoUpsertWithoutAnswerAttemptsInput;
  connect?: AssessmentInfoWhereUniqueInput;
}

export interface ConceptUpdateWithoutCourseDataInput {
  title?: String;
  assessments?: AssessmentUpdateManyWithoutConceptInput;
  order?: Int;
  level?: Int;
  parent?: ConceptUpdateOneInput;
}

export interface AssessmentInfoUpdateInput {
  user?: UserUpdateOneRequiredWithoutAssessmentInfosInput;
  assessment?: AssessmentUpdateOneRequiredInput;
  answeredCorrectly?: Boolean;
  solutionViewed?: Boolean;
  sourceCodeViewed?: Boolean;
  answerAttempts?: AnswerAttemptUpdateManyWithoutAssessmentInfoInput;
}

export interface ConceptUpdateManyWithoutCourseInput {
  create?: ConceptCreateWithoutCourseInput[] | ConceptCreateWithoutCourseInput;
  delete?: ConceptWhereUniqueInput[] | ConceptWhereUniqueInput;
  connect?: ConceptWhereUniqueInput[] | ConceptWhereUniqueInput;
  disconnect?: ConceptWhereUniqueInput[] | ConceptWhereUniqueInput;
  update?:
    | ConceptUpdateWithWhereUniqueWithoutCourseInput[]
    | ConceptUpdateWithWhereUniqueWithoutCourseInput;
  upsert?:
    | ConceptUpsertWithWhereUniqueWithoutCourseInput[]
    | ConceptUpsertWithWhereUniqueWithoutCourseInput;
}

export interface UserUpdateOneRequiredWithoutAssessmentInfosInput {
  create?: UserCreateWithoutAssessmentInfosInput;
  update?: UserUpdateWithoutAssessmentInfosDataInput;
  upsert?: UserUpsertWithoutAssessmentInfosInput;
  connect?: UserWhereUniqueInput;
}

export type TokenTransactionWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserUpdateWithoutAssessmentInfosDataInput {
  email?: String;
  password?: String;
  tokens?: Int;
  termsAcceptedDate?: DateTimeInput;
  termsAcceptedVersion?: String;
  assessments?: AssessmentUpdateManyWithoutAuthorInput;
}

export interface TokenTransactionWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  user?: UserWhereInput;
  amount?: Int;
  amount_not?: Int;
  amount_in?: Int[] | Int;
  amount_not_in?: Int[] | Int;
  amount_lt?: Int;
  amount_lte?: Int;
  amount_gt?: Int;
  amount_gte?: Int;
  type?: TokenTransactionType;
  type_not?: TokenTransactionType;
  type_in?: TokenTransactionType[] | TokenTransactionType;
  type_not_in?: TokenTransactionType[] | TokenTransactionType;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  AND?: TokenTransactionWhereInput[] | TokenTransactionWhereInput;
  OR?: TokenTransactionWhereInput[] | TokenTransactionWhereInput;
  NOT?: TokenTransactionWhereInput[] | TokenTransactionWhereInput;
}

export interface AssessmentUpdateManyWithoutAuthorInput {
  create?:
    | AssessmentCreateWithoutAuthorInput[]
    | AssessmentCreateWithoutAuthorInput;
  delete?: AssessmentWhereUniqueInput[] | AssessmentWhereUniqueInput;
  connect?: AssessmentWhereUniqueInput[] | AssessmentWhereUniqueInput;
  disconnect?: AssessmentWhereUniqueInput[] | AssessmentWhereUniqueInput;
  update?:
    | AssessmentUpdateWithWhereUniqueWithoutAuthorInput[]
    | AssessmentUpdateWithWhereUniqueWithoutAuthorInput;
  upsert?:
    | AssessmentUpsertWithWhereUniqueWithoutAuthorInput[]
    | AssessmentUpsertWithWhereUniqueWithoutAuthorInput;
}

export interface CourseCreateInput {
  title: String;
  concepts?: ConceptCreateManyWithoutCourseInput;
  order: Int;
}

export interface AssessmentUpdateWithWhereUniqueWithoutAuthorInput {
  where: AssessmentWhereUniqueInput;
  data: AssessmentUpdateWithoutAuthorDataInput;
}

export interface ConstantUpdateInput {
  key?: ConstantKey;
  value?: String;
}

export interface AssessmentUpdateWithoutAuthorDataInput {
  concept?: ConceptUpdateOneRequiredWithoutAssessmentsInput;
  assessML?: String;
  javaScript?: String;
  order?: Int;
  verified?: Boolean;
}

export interface ConstantCreateInput {
  key: ConstantKey;
  value: String;
}

export interface ConceptUpdateOneRequiredWithoutAssessmentsInput {
  create?: ConceptCreateWithoutAssessmentsInput;
  update?: ConceptUpdateWithoutAssessmentsDataInput;
  upsert?: ConceptUpsertWithoutAssessmentsInput;
  connect?: ConceptWhereUniqueInput;
}

export interface ConceptUpdateInput {
  title?: String;
  course?: CourseUpdateOneRequiredWithoutConceptsInput;
  assessments?: AssessmentUpdateManyWithoutConceptInput;
  order?: Int;
  level?: Int;
  parent?: ConceptUpdateOneInput;
}

export interface ConceptUpdateWithoutAssessmentsDataInput {
  title?: String;
  course?: CourseUpdateOneRequiredWithoutConceptsInput;
  order?: Int;
  level?: Int;
  parent?: ConceptUpdateOneInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface AssessmentInfoCreateInput {
  user: UserCreateOneWithoutAssessmentInfosInput;
  assessment: AssessmentCreateOneInput;
  answeredCorrectly: Boolean;
  solutionViewed: Boolean;
  sourceCodeViewed: Boolean;
  answerAttempts?: AnswerAttemptCreateManyWithoutAssessmentInfoInput;
}

export interface TokenRewardSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TokenRewardWhereInput;
  AND?: TokenRewardSubscriptionWhereInput[] | TokenRewardSubscriptionWhereInput;
  OR?: TokenRewardSubscriptionWhereInput[] | TokenRewardSubscriptionWhereInput;
  NOT?: TokenRewardSubscriptionWhereInput[] | TokenRewardSubscriptionWhereInput;
}

export interface AssessmentUpdateManyMutationInput {
  assessML?: String;
  javaScript?: String;
  order?: Int;
  verified?: Boolean;
}

export interface ConstantSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ConstantWhereInput;
  AND?: ConstantSubscriptionWhereInput[] | ConstantSubscriptionWhereInput;
  OR?: ConstantSubscriptionWhereInput[] | ConstantSubscriptionWhereInput;
  NOT?: ConstantSubscriptionWhereInput[] | ConstantSubscriptionWhereInput;
}

export interface CourseUpsertWithoutConceptsInput {
  update: CourseUpdateWithoutConceptsDataInput;
  create: CourseCreateWithoutConceptsInput;
}

export interface AssessmentSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: AssessmentWhereInput;
  AND?: AssessmentSubscriptionWhereInput[] | AssessmentSubscriptionWhereInput;
  OR?: AssessmentSubscriptionWhereInput[] | AssessmentSubscriptionWhereInput;
  NOT?: AssessmentSubscriptionWhereInput[] | AssessmentSubscriptionWhereInput;
}

export interface ConceptUpdateOneInput {
  create?: ConceptCreateInput;
  update?: ConceptUpdateDataInput;
  upsert?: ConceptUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: ConceptWhereUniqueInput;
}

export interface UserUpdateInput {
  email?: String;
  password?: String;
  tokens?: Int;
  assessmentInfos?: AssessmentInfoUpdateManyWithoutUserInput;
  termsAcceptedDate?: DateTimeInput;
  termsAcceptedVersion?: String;
  assessments?: AssessmentUpdateManyWithoutAuthorInput;
}

export interface ConceptUpdateDataInput {
  title?: String;
  course?: CourseUpdateOneRequiredWithoutConceptsInput;
  assessments?: AssessmentUpdateManyWithoutConceptInput;
  order?: Int;
  level?: Int;
  parent?: ConceptUpdateOneInput;
}

export interface AssessmentWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  concept?: ConceptWhereInput;
  assessML?: String;
  assessML_not?: String;
  assessML_in?: String[] | String;
  assessML_not_in?: String[] | String;
  assessML_lt?: String;
  assessML_lte?: String;
  assessML_gt?: String;
  assessML_gte?: String;
  assessML_contains?: String;
  assessML_not_contains?: String;
  assessML_starts_with?: String;
  assessML_not_starts_with?: String;
  assessML_ends_with?: String;
  assessML_not_ends_with?: String;
  javaScript?: String;
  javaScript_not?: String;
  javaScript_in?: String[] | String;
  javaScript_not_in?: String[] | String;
  javaScript_lt?: String;
  javaScript_lte?: String;
  javaScript_gt?: String;
  javaScript_gte?: String;
  javaScript_contains?: String;
  javaScript_not_contains?: String;
  javaScript_starts_with?: String;
  javaScript_not_starts_with?: String;
  javaScript_ends_with?: String;
  javaScript_not_ends_with?: String;
  order?: Int;
  order_not?: Int;
  order_in?: Int[] | Int;
  order_not_in?: Int[] | Int;
  order_lt?: Int;
  order_lte?: Int;
  order_gt?: Int;
  order_gte?: Int;
  verified?: Boolean;
  verified_not?: Boolean;
  author?: UserWhereInput;
  AND?: AssessmentWhereInput[] | AssessmentWhereInput;
  OR?: AssessmentWhereInput[] | AssessmentWhereInput;
  NOT?: AssessmentWhereInput[] | AssessmentWhereInput;
}

export interface AssessmentUpdateManyWithoutConceptInput {
  create?:
    | AssessmentCreateWithoutConceptInput[]
    | AssessmentCreateWithoutConceptInput;
  delete?: AssessmentWhereUniqueInput[] | AssessmentWhereUniqueInput;
  connect?: AssessmentWhereUniqueInput[] | AssessmentWhereUniqueInput;
  disconnect?: AssessmentWhereUniqueInput[] | AssessmentWhereUniqueInput;
  update?:
    | AssessmentUpdateWithWhereUniqueWithoutConceptInput[]
    | AssessmentUpdateWithWhereUniqueWithoutConceptInput;
  upsert?:
    | AssessmentUpsertWithWhereUniqueWithoutConceptInput[]
    | AssessmentUpsertWithWhereUniqueWithoutConceptInput;
}

export interface TokenRewardUpdateManyMutationInput {
  type?: TokenTransactionType;
  amount?: Int;
}

export interface AssessmentUpdateWithWhereUniqueWithoutConceptInput {
  where: AssessmentWhereUniqueInput;
  data: AssessmentUpdateWithoutConceptDataInput;
}

export interface AssessmentInfoWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  user?: UserWhereInput;
  assessment?: AssessmentWhereInput;
  answeredCorrectly?: Boolean;
  answeredCorrectly_not?: Boolean;
  solutionViewed?: Boolean;
  solutionViewed_not?: Boolean;
  sourceCodeViewed?: Boolean;
  sourceCodeViewed_not?: Boolean;
  answerAttempts_every?: AnswerAttemptWhereInput;
  answerAttempts_some?: AnswerAttemptWhereInput;
  answerAttempts_none?: AnswerAttemptWhereInput;
  AND?: AssessmentInfoWhereInput[] | AssessmentInfoWhereInput;
  OR?: AssessmentInfoWhereInput[] | AssessmentInfoWhereInput;
  NOT?: AssessmentInfoWhereInput[] | AssessmentInfoWhereInput;
}

export interface AssessmentUpdateWithoutConceptDataInput {
  assessML?: String;
  javaScript?: String;
  order?: Int;
  verified?: Boolean;
  author?: UserUpdateOneRequiredWithoutAssessmentsInput;
}

export type FeedbackSubmissionWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserUpdateOneRequiredWithoutAssessmentsInput {
  create?: UserCreateWithoutAssessmentsInput;
  update?: UserUpdateWithoutAssessmentsDataInput;
  upsert?: UserUpsertWithoutAssessmentsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateInput {
  email: String;
  password: String;
  tokens: Int;
  assessmentInfos?: AssessmentInfoCreateManyWithoutUserInput;
  termsAcceptedDate?: DateTimeInput;
  termsAcceptedVersion?: String;
  assessments?: AssessmentCreateManyWithoutAuthorInput;
}

export interface UserUpdateWithoutAssessmentsDataInput {
  email?: String;
  password?: String;
  tokens?: Int;
  assessmentInfos?: AssessmentInfoUpdateManyWithoutUserInput;
  termsAcceptedDate?: DateTimeInput;
  termsAcceptedVersion?: String;
}

export interface CourseUpdateManyMutationInput {
  title?: String;
  order?: Int;
}

export interface AssessmentInfoUpdateManyWithoutUserInput {
  create?:
    | AssessmentInfoCreateWithoutUserInput[]
    | AssessmentInfoCreateWithoutUserInput;
  delete?: AssessmentInfoWhereUniqueInput[] | AssessmentInfoWhereUniqueInput;
  connect?: AssessmentInfoWhereUniqueInput[] | AssessmentInfoWhereUniqueInput;
  disconnect?:
    | AssessmentInfoWhereUniqueInput[]
    | AssessmentInfoWhereUniqueInput;
  update?:
    | AssessmentInfoUpdateWithWhereUniqueWithoutUserInput[]
    | AssessmentInfoUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | AssessmentInfoUpsertWithWhereUniqueWithoutUserInput[]
    | AssessmentInfoUpsertWithWhereUniqueWithoutUserInput;
}

export interface ConceptUpdateWithWhereUniqueWithoutCourseInput {
  where: ConceptWhereUniqueInput;
  data: ConceptUpdateWithoutCourseDataInput;
}

export interface AssessmentInfoUpdateWithWhereUniqueWithoutUserInput {
  where: AssessmentInfoWhereUniqueInput;
  data: AssessmentInfoUpdateWithoutUserDataInput;
}

export interface ConceptCreateWithoutCourseInput {
  title: String;
  assessments?: AssessmentCreateManyWithoutConceptInput;
  order: Int;
  level?: Int;
  parent?: ConceptCreateOneInput;
}

export interface AssessmentInfoUpdateWithoutUserDataInput {
  assessment?: AssessmentUpdateOneRequiredInput;
  answeredCorrectly?: Boolean;
  solutionViewed?: Boolean;
  sourceCodeViewed?: Boolean;
  answerAttempts?: AnswerAttemptUpdateManyWithoutAssessmentInfoInput;
}

export interface ConstantUpdateManyMutationInput {
  key?: ConstantKey;
  value?: String;
}

export interface AssessmentUpdateOneRequiredInput {
  create?: AssessmentCreateInput;
  update?: AssessmentUpdateDataInput;
  upsert?: AssessmentUpsertNestedInput;
  connect?: AssessmentWhereUniqueInput;
}

export interface ConceptUpdateManyMutationInput {
  title?: String;
  order?: Int;
  level?: Int;
}

export interface AssessmentUpdateDataInput {
  concept?: ConceptUpdateOneRequiredWithoutAssessmentsInput;
  assessML?: String;
  javaScript?: String;
  order?: Int;
  verified?: Boolean;
  author?: UserUpdateOneRequiredWithoutAssessmentsInput;
}

export interface AnswerAttemptCreateInput {
  assessmentInfo: AssessmentInfoCreateOneWithoutAnswerAttemptsInput;
  correct: Boolean;
}

export interface AssessmentUpsertNestedInput {
  update: AssessmentUpdateDataInput;
  create: AssessmentCreateInput;
}

export interface CourseSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CourseWhereInput;
  AND?: CourseSubscriptionWhereInput[] | CourseSubscriptionWhereInput;
  OR?: CourseSubscriptionWhereInput[] | CourseSubscriptionWhereInput;
  NOT?: CourseSubscriptionWhereInput[] | CourseSubscriptionWhereInput;
}

export interface AnswerAttemptUpdateManyWithoutAssessmentInfoInput {
  create?:
    | AnswerAttemptCreateWithoutAssessmentInfoInput[]
    | AnswerAttemptCreateWithoutAssessmentInfoInput;
  delete?: AnswerAttemptWhereUniqueInput[] | AnswerAttemptWhereUniqueInput;
  connect?: AnswerAttemptWhereUniqueInput[] | AnswerAttemptWhereUniqueInput;
  disconnect?: AnswerAttemptWhereUniqueInput[] | AnswerAttemptWhereUniqueInput;
  update?:
    | AnswerAttemptUpdateWithWhereUniqueWithoutAssessmentInfoInput[]
    | AnswerAttemptUpdateWithWhereUniqueWithoutAssessmentInfoInput;
  upsert?:
    | AnswerAttemptUpsertWithWhereUniqueWithoutAssessmentInfoInput[]
    | AnswerAttemptUpsertWithWhereUniqueWithoutAssessmentInfoInput;
}

export interface UserUpdateManyMutationInput {
  email?: String;
  password?: String;
  tokens?: Int;
  termsAcceptedDate?: DateTimeInput;
  termsAcceptedVersion?: String;
}

export interface AnswerAttemptUpdateWithWhereUniqueWithoutAssessmentInfoInput {
  where: AnswerAttemptWhereUniqueInput;
  data: AnswerAttemptUpdateWithoutAssessmentInfoDataInput;
}

export interface ConstantWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  key?: ConstantKey;
  key_not?: ConstantKey;
  key_in?: ConstantKey[] | ConstantKey;
  key_not_in?: ConstantKey[] | ConstantKey;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  AND?: ConstantWhereInput[] | ConstantWhereInput;
  OR?: ConstantWhereInput[] | ConstantWhereInput;
  NOT?: ConstantWhereInput[] | ConstantWhereInput;
}

export interface AnswerAttemptUpdateWithoutAssessmentInfoDataInput {
  correct?: Boolean;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface AnswerAttemptUpsertWithWhereUniqueWithoutAssessmentInfoInput {
  where: AnswerAttemptWhereUniqueInput;
  update: AnswerAttemptUpdateWithoutAssessmentInfoDataInput;
  create: AnswerAttemptCreateWithoutAssessmentInfoInput;
}

export interface FeedbackSubmissionCreateInput {
  user: UserCreateOneInput;
  text: String;
  open: Boolean;
  description: String;
}

export interface AssessmentInfoUpsertWithWhereUniqueWithoutUserInput {
  where: AssessmentInfoWhereUniqueInput;
  update: AssessmentInfoUpdateWithoutUserDataInput;
  create: AssessmentInfoCreateWithoutUserInput;
}

export interface CourseUpdateInput {
  title?: String;
  concepts?: ConceptUpdateManyWithoutCourseInput;
  order?: Int;
}

export interface UserUpsertWithoutAssessmentsInput {
  update: UserUpdateWithoutAssessmentsDataInput;
  create: UserCreateWithoutAssessmentsInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface AssessmentUpsertWithWhereUniqueWithoutConceptInput {
  where: AssessmentWhereUniqueInput;
  update: AssessmentUpdateWithoutConceptDataInput;
  create: AssessmentCreateWithoutConceptInput;
}

export interface ConceptWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  course?: CourseWhereInput;
  assessments_every?: AssessmentWhereInput;
  assessments_some?: AssessmentWhereInput;
  assessments_none?: AssessmentWhereInput;
  order?: Int;
  order_not?: Int;
  order_in?: Int[] | Int;
  order_not_in?: Int[] | Int;
  order_lt?: Int;
  order_lte?: Int;
  order_gt?: Int;
  order_gte?: Int;
  level?: Int;
  level_not?: Int;
  level_in?: Int[] | Int;
  level_not_in?: Int[] | Int;
  level_lt?: Int;
  level_lte?: Int;
  level_gt?: Int;
  level_gte?: Int;
  parent?: ConceptWhereInput;
  AND?: ConceptWhereInput[] | ConceptWhereInput;
  OR?: ConceptWhereInput[] | ConceptWhereInput;
  NOT?: ConceptWhereInput[] | ConceptWhereInput;
}

export interface ConceptUpsertNestedInput {
  update: ConceptUpdateDataInput;
  create: ConceptCreateInput;
}

export interface TokenTransactionUpdateInput {
  user?: UserUpdateOneRequiredInput;
  amount?: Int;
  type?: TokenTransactionType;
  description?: String;
}

export interface ConceptUpsertWithoutAssessmentsInput {
  update: ConceptUpdateWithoutAssessmentsDataInput;
  create: ConceptCreateWithoutAssessmentsInput;
}

export interface FeedbackSubmissionWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  user?: UserWhereInput;
  text?: String;
  text_not?: String;
  text_in?: String[] | String;
  text_not_in?: String[] | String;
  text_lt?: String;
  text_lte?: String;
  text_gt?: String;
  text_gte?: String;
  text_contains?: String;
  text_not_contains?: String;
  text_starts_with?: String;
  text_not_starts_with?: String;
  text_ends_with?: String;
  text_not_ends_with?: String;
  open?: Boolean;
  open_not?: Boolean;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  AND?: FeedbackSubmissionWhereInput[] | FeedbackSubmissionWhereInput;
  OR?: FeedbackSubmissionWhereInput[] | FeedbackSubmissionWhereInput;
  NOT?: FeedbackSubmissionWhereInput[] | FeedbackSubmissionWhereInput;
}

export interface AnswerAttemptUpdateManyMutationInput {
  correct?: Boolean;
}

export interface AssessmentInfoUpsertWithoutAnswerAttemptsInput {
  update: AssessmentInfoUpdateWithoutAnswerAttemptsDataInput;
  create: AssessmentInfoCreateWithoutAnswerAttemptsInput;
}

export interface UserUpsertWithoutAssessmentInfosInput {
  update: UserUpdateWithoutAssessmentInfosDataInput;
  create: UserCreateWithoutAssessmentInfosInput;
}

export interface AssessmentUpsertWithWhereUniqueWithoutAuthorInput {
  where: AssessmentWhereUniqueInput;
  update: AssessmentUpdateWithoutAuthorDataInput;
  create: AssessmentCreateWithoutAuthorInput;
}

export interface TokenRewardWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  type?: TokenTransactionType;
  type_not?: TokenTransactionType;
  type_in?: TokenTransactionType[] | TokenTransactionType;
  type_not_in?: TokenTransactionType[] | TokenTransactionType;
  amount?: Int;
  amount_not?: Int;
  amount_in?: Int[] | Int;
  amount_not_in?: Int[] | Int;
  amount_lt?: Int;
  amount_lte?: Int;
  amount_gt?: Int;
  amount_gte?: Int;
  AND?: TokenRewardWhereInput[] | TokenRewardWhereInput;
  OR?: TokenRewardWhereInput[] | TokenRewardWhereInput;
  NOT?: TokenRewardWhereInput[] | TokenRewardWhereInput;
}

export interface TokenRewardCreateInput {
  type: TokenTransactionType;
  amount: Int;
}

export interface AssessmentInfoSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: AssessmentInfoWhereInput;
  AND?:
    | AssessmentInfoSubscriptionWhereInput[]
    | AssessmentInfoSubscriptionWhereInput;
  OR?:
    | AssessmentInfoSubscriptionWhereInput[]
    | AssessmentInfoSubscriptionWhereInput;
  NOT?:
    | AssessmentInfoSubscriptionWhereInput[]
    | AssessmentInfoSubscriptionWhereInput;
}

export interface AssessmentInfoUpdateManyMutationInput {
  answeredCorrectly?: Boolean;
  solutionViewed?: Boolean;
  sourceCodeViewed?: Boolean;
}

export interface ConceptCreateManyWithoutCourseInput {
  create?: ConceptCreateWithoutCourseInput[] | ConceptCreateWithoutCourseInput;
  connect?: ConceptWhereUniqueInput[] | ConceptWhereUniqueInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  email: String;
  password: String;
  tokens: Int;
  termsAcceptedDate?: DateTimeOutput;
  termsAcceptedVersion?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  tokens: () => Promise<Int>;
  termsAcceptedDate: () => Promise<DateTimeOutput>;
  termsAcceptedVersion: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  tokens: () => Promise<AsyncIterator<Int>>;
  termsAcceptedDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  termsAcceptedVersion: () => Promise<AsyncIterator<String>>;
}

export interface ConceptEdge {
  cursor: String;
}

export interface ConceptEdgePromise extends Promise<ConceptEdge>, Fragmentable {
  node: <T = ConceptPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ConceptEdgeSubscription
  extends Promise<AsyncIterator<ConceptEdge>>,
    Fragmentable {
  node: <T = ConceptSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Assessment {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  assessML: String;
  javaScript: String;
  order: Int;
  verified: Boolean;
}

export interface AssessmentPromise extends Promise<Assessment>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  concept: <T = ConceptPromise>() => T;
  assessML: () => Promise<String>;
  javaScript: () => Promise<String>;
  order: () => Promise<Int>;
  verified: () => Promise<Boolean>;
  author: <T = UserPromise>() => T;
}

export interface AssessmentSubscription
  extends Promise<AsyncIterator<Assessment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  concept: <T = ConceptSubscription>() => T;
  assessML: () => Promise<AsyncIterator<String>>;
  javaScript: () => Promise<AsyncIterator<String>>;
  order: () => Promise<AsyncIterator<Int>>;
  verified: () => Promise<AsyncIterator<Boolean>>;
  author: <T = UserSubscription>() => T;
}

export interface ConceptConnection {}

export interface ConceptConnectionPromise
  extends Promise<ConceptConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ConceptEdge>>() => T;
  aggregate: <T = AggregateConceptPromise>() => T;
}

export interface ConceptConnectionSubscription
  extends Promise<AsyncIterator<ConceptConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ConceptEdgeSubscription>>>() => T;
  aggregate: <T = AggregateConceptSubscription>() => T;
}

export interface Concept {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  title: String;
  order: Int;
  level?: Int;
}

export interface ConceptPromise extends Promise<Concept>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  course: <T = CoursePromise>() => T;
  assessments: <T = FragmentableArray<Assessment>>(
    args?: {
      where?: AssessmentWhereInput;
      orderBy?: AssessmentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  order: () => Promise<Int>;
  level: () => Promise<Int>;
  parent: <T = ConceptPromise>() => T;
}

export interface ConceptSubscription
  extends Promise<AsyncIterator<Concept>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  course: <T = CourseSubscription>() => T;
  assessments: <T = Promise<AsyncIterator<AssessmentSubscription>>>(
    args?: {
      where?: AssessmentWhereInput;
      orderBy?: AssessmentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  order: () => Promise<AsyncIterator<Int>>;
  level: () => Promise<AsyncIterator<Int>>;
  parent: <T = ConceptSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AnswerAttemptConnection {}

export interface AnswerAttemptConnectionPromise
  extends Promise<AnswerAttemptConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AnswerAttemptEdge>>() => T;
  aggregate: <T = AggregateAnswerAttemptPromise>() => T;
}

export interface AnswerAttemptConnectionSubscription
  extends Promise<AsyncIterator<AnswerAttemptConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AnswerAttemptEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAnswerAttemptSubscription>() => T;
}

export interface TokenTransactionSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface TokenTransactionSubscriptionPayloadPromise
  extends Promise<TokenTransactionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TokenTransactionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TokenTransactionPreviousValuesPromise>() => T;
}

export interface TokenTransactionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TokenTransactionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TokenTransactionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TokenTransactionPreviousValuesSubscription>() => T;
}

export interface AggregateAssessmentInfo {
  count: Int;
}

export interface AggregateAssessmentInfoPromise
  extends Promise<AggregateAssessmentInfo>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAssessmentInfoSubscription
  extends Promise<AsyncIterator<AggregateAssessmentInfo>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface AssessmentInfoEdge {
  cursor: String;
}

export interface AssessmentInfoEdgePromise
  extends Promise<AssessmentInfoEdge>,
    Fragmentable {
  node: <T = AssessmentInfoPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AssessmentInfoEdgeSubscription
  extends Promise<AsyncIterator<AssessmentInfoEdge>>,
    Fragmentable {
  node: <T = AssessmentInfoSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTokenTransaction {
  count: Int;
}

export interface AggregateTokenTransactionPromise
  extends Promise<AggregateTokenTransaction>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTokenTransactionSubscription
  extends Promise<AsyncIterator<AggregateTokenTransaction>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AnswerAttempt {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  correct: Boolean;
}

export interface AnswerAttemptPromise
  extends Promise<AnswerAttempt>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  assessmentInfo: <T = AssessmentInfoPromise>() => T;
  correct: () => Promise<Boolean>;
}

export interface AnswerAttemptSubscription
  extends Promise<AsyncIterator<AnswerAttempt>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  assessmentInfo: <T = AssessmentInfoSubscription>() => T;
  correct: () => Promise<AsyncIterator<Boolean>>;
}

export interface TokenTransactionConnection {}

export interface TokenTransactionConnectionPromise
  extends Promise<TokenTransactionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TokenTransactionEdge>>() => T;
  aggregate: <T = AggregateTokenTransactionPromise>() => T;
}

export interface TokenTransactionConnectionSubscription
  extends Promise<AsyncIterator<TokenTransactionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TokenTransactionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTokenTransactionSubscription>() => T;
}

export interface AnswerAttemptSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface AnswerAttemptSubscriptionPayloadPromise
  extends Promise<AnswerAttemptSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AnswerAttemptPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AnswerAttemptPreviousValuesPromise>() => T;
}

export interface AnswerAttemptSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AnswerAttemptSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AnswerAttemptSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AnswerAttemptPreviousValuesSubscription>() => T;
}

export interface TokenTransaction {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  amount: Int;
  type: TokenTransactionType;
  description: String;
}

export interface TokenTransactionPromise
  extends Promise<TokenTransaction>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  user: <T = UserPromise>() => T;
  amount: () => Promise<Int>;
  type: () => Promise<TokenTransactionType>;
  description: () => Promise<String>;
}

export interface TokenTransactionSubscription
  extends Promise<AsyncIterator<TokenTransaction>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  user: <T = UserSubscription>() => T;
  amount: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<TokenTransactionType>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface AnswerAttemptPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  correct: Boolean;
}

export interface AnswerAttemptPreviousValuesPromise
  extends Promise<AnswerAttemptPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  correct: () => Promise<Boolean>;
}

export interface AnswerAttemptPreviousValuesSubscription
  extends Promise<AsyncIterator<AnswerAttemptPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  correct: () => Promise<AsyncIterator<Boolean>>;
}

export interface TokenRewardEdge {
  cursor: String;
}

export interface TokenRewardEdgePromise
  extends Promise<TokenRewardEdge>,
    Fragmentable {
  node: <T = TokenRewardPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TokenRewardEdgeSubscription
  extends Promise<AsyncIterator<TokenRewardEdge>>,
    Fragmentable {
  node: <T = TokenRewardSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AssessmentInfoConnection {}

export interface AssessmentInfoConnectionPromise
  extends Promise<AssessmentInfoConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AssessmentInfoEdge>>() => T;
  aggregate: <T = AggregateAssessmentInfoPromise>() => T;
}

export interface AssessmentInfoConnectionSubscription
  extends Promise<AsyncIterator<AssessmentInfoConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AssessmentInfoEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAssessmentInfoSubscription>() => T;
}

export interface User {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  email: String;
  password: String;
  tokens: Int;
  termsAcceptedDate?: DateTimeOutput;
  termsAcceptedVersion?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  tokens: () => Promise<Int>;
  assessmentInfos: <T = FragmentableArray<AssessmentInfo>>(
    args?: {
      where?: AssessmentInfoWhereInput;
      orderBy?: AssessmentInfoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  termsAcceptedDate: () => Promise<DateTimeOutput>;
  termsAcceptedVersion: () => Promise<String>;
  assessments: <T = FragmentableArray<Assessment>>(
    args?: {
      where?: AssessmentWhereInput;
      orderBy?: AssessmentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  tokens: () => Promise<AsyncIterator<Int>>;
  assessmentInfos: <T = Promise<AsyncIterator<AssessmentInfoSubscription>>>(
    args?: {
      where?: AssessmentInfoWhereInput;
      orderBy?: AssessmentInfoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  termsAcceptedDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  termsAcceptedVersion: () => Promise<AsyncIterator<String>>;
  assessments: <T = Promise<AsyncIterator<AssessmentSubscription>>>(
    args?: {
      where?: AssessmentWhereInput;
      orderBy?: AssessmentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface AssessmentSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface AssessmentSubscriptionPayloadPromise
  extends Promise<AssessmentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AssessmentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AssessmentPreviousValuesPromise>() => T;
}

export interface AssessmentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AssessmentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AssessmentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AssessmentPreviousValuesSubscription>() => T;
}

export interface Course {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  title: String;
  order: Int;
}

export interface CoursePromise extends Promise<Course>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  concepts: <T = FragmentableArray<Concept>>(
    args?: {
      where?: ConceptWhereInput;
      orderBy?: ConceptOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  order: () => Promise<Int>;
}

export interface CourseSubscription
  extends Promise<AsyncIterator<Course>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  concepts: <T = Promise<AsyncIterator<ConceptSubscription>>>(
    args?: {
      where?: ConceptWhereInput;
      orderBy?: ConceptOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  order: () => Promise<AsyncIterator<Int>>;
}

export interface AssessmentPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  assessML: String;
  javaScript: String;
  order: Int;
  verified: Boolean;
}

export interface AssessmentPreviousValuesPromise
  extends Promise<AssessmentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  assessML: () => Promise<String>;
  javaScript: () => Promise<String>;
  order: () => Promise<Int>;
  verified: () => Promise<Boolean>;
}

export interface AssessmentPreviousValuesSubscription
  extends Promise<AsyncIterator<AssessmentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  assessML: () => Promise<AsyncIterator<String>>;
  javaScript: () => Promise<AsyncIterator<String>>;
  order: () => Promise<AsyncIterator<Int>>;
  verified: () => Promise<AsyncIterator<Boolean>>;
}

export interface FeedbackSubmissionEdge {
  cursor: String;
}

export interface FeedbackSubmissionEdgePromise
  extends Promise<FeedbackSubmissionEdge>,
    Fragmentable {
  node: <T = FeedbackSubmissionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FeedbackSubmissionEdgeSubscription
  extends Promise<AsyncIterator<FeedbackSubmissionEdge>>,
    Fragmentable {
  node: <T = FeedbackSubmissionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAssessment {
  count: Int;
}

export interface AggregateAssessmentPromise
  extends Promise<AggregateAssessment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAssessmentSubscription
  extends Promise<AsyncIterator<AggregateAssessment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TokenTransactionPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  amount: Int;
  type: TokenTransactionType;
  description: String;
}

export interface TokenTransactionPreviousValuesPromise
  extends Promise<TokenTransactionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  amount: () => Promise<Int>;
  type: () => Promise<TokenTransactionType>;
  description: () => Promise<String>;
}

export interface TokenTransactionPreviousValuesSubscription
  extends Promise<AsyncIterator<TokenTransactionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  amount: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<TokenTransactionType>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface AssessmentInfoSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface AssessmentInfoSubscriptionPayloadPromise
  extends Promise<AssessmentInfoSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AssessmentInfoPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AssessmentInfoPreviousValuesPromise>() => T;
}

export interface AssessmentInfoSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AssessmentInfoSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AssessmentInfoSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AssessmentInfoPreviousValuesSubscription>() => T;
}

export interface AggregateCourse {
  count: Int;
}

export interface AggregateCoursePromise
  extends Promise<AggregateCourse>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCourseSubscription
  extends Promise<AsyncIterator<AggregateCourse>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AssessmentInfoPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  answeredCorrectly: Boolean;
  solutionViewed: Boolean;
  sourceCodeViewed: Boolean;
}

export interface AssessmentInfoPreviousValuesPromise
  extends Promise<AssessmentInfoPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  answeredCorrectly: () => Promise<Boolean>;
  solutionViewed: () => Promise<Boolean>;
  sourceCodeViewed: () => Promise<Boolean>;
}

export interface AssessmentInfoPreviousValuesSubscription
  extends Promise<AsyncIterator<AssessmentInfoPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  answeredCorrectly: () => Promise<AsyncIterator<Boolean>>;
  solutionViewed: () => Promise<AsyncIterator<Boolean>>;
  sourceCodeViewed: () => Promise<AsyncIterator<Boolean>>;
}

export interface CourseConnection {}

export interface CourseConnectionPromise
  extends Promise<CourseConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CourseEdge>>() => T;
  aggregate: <T = AggregateCoursePromise>() => T;
}

export interface CourseConnectionSubscription
  extends Promise<AsyncIterator<CourseConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CourseEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCourseSubscription>() => T;
}

export interface AssessmentEdge {
  cursor: String;
}

export interface AssessmentEdgePromise
  extends Promise<AssessmentEdge>,
    Fragmentable {
  node: <T = AssessmentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AssessmentEdgeSubscription
  extends Promise<AsyncIterator<AssessmentEdge>>,
    Fragmentable {
  node: <T = AssessmentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ConstantEdge {
  cursor: String;
}

export interface ConstantEdgePromise
  extends Promise<ConstantEdge>,
    Fragmentable {
  node: <T = ConstantPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ConstantEdgeSubscription
  extends Promise<AsyncIterator<ConstantEdge>>,
    Fragmentable {
  node: <T = ConstantSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ConceptSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface ConceptSubscriptionPayloadPromise
  extends Promise<ConceptSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ConceptPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ConceptPreviousValuesPromise>() => T;
}

export interface ConceptSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ConceptSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ConceptSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ConceptPreviousValuesSubscription>() => T;
}

export interface Constant {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  key: ConstantKey;
  value: String;
}

export interface ConstantPromise extends Promise<Constant>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  key: () => Promise<ConstantKey>;
  value: () => Promise<String>;
}

export interface ConstantSubscription
  extends Promise<AsyncIterator<Constant>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  key: () => Promise<AsyncIterator<ConstantKey>>;
  value: () => Promise<AsyncIterator<String>>;
}

export interface ConceptPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  title: String;
  order: Int;
  level?: Int;
}

export interface ConceptPreviousValuesPromise
  extends Promise<ConceptPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  order: () => Promise<Int>;
  level: () => Promise<Int>;
}

export interface ConceptPreviousValuesSubscription
  extends Promise<AsyncIterator<ConceptPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  order: () => Promise<AsyncIterator<Int>>;
  level: () => Promise<AsyncIterator<Int>>;
}

export interface UserEdge {
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AssessmentConnection {}

export interface AssessmentConnectionPromise
  extends Promise<AssessmentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AssessmentEdge>>() => T;
  aggregate: <T = AggregateAssessmentPromise>() => T;
}

export interface AssessmentConnectionSubscription
  extends Promise<AsyncIterator<AssessmentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AssessmentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAssessmentSubscription>() => T;
}

export interface TokenTransactionEdge {
  cursor: String;
}

export interface TokenTransactionEdgePromise
  extends Promise<TokenTransactionEdge>,
    Fragmentable {
  node: <T = TokenTransactionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TokenTransactionEdgeSubscription
  extends Promise<AsyncIterator<TokenTransactionEdge>>,
    Fragmentable {
  node: <T = TokenTransactionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ConstantSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface ConstantSubscriptionPayloadPromise
  extends Promise<ConstantSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ConstantPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ConstantPreviousValuesPromise>() => T;
}

export interface ConstantSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ConstantSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ConstantSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ConstantPreviousValuesSubscription>() => T;
}

export interface AggregateTokenReward {
  count: Int;
}

export interface AggregateTokenRewardPromise
  extends Promise<AggregateTokenReward>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTokenRewardSubscription
  extends Promise<AsyncIterator<AggregateTokenReward>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ConstantPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  key: ConstantKey;
  value: String;
}

export interface ConstantPreviousValuesPromise
  extends Promise<ConstantPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  key: () => Promise<ConstantKey>;
  value: () => Promise<String>;
}

export interface ConstantPreviousValuesSubscription
  extends Promise<AsyncIterator<ConstantPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  key: () => Promise<AsyncIterator<ConstantKey>>;
  value: () => Promise<AsyncIterator<String>>;
}

export interface TokenReward {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  type: TokenTransactionType;
  amount: Int;
}

export interface TokenRewardPromise extends Promise<TokenReward>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  type: () => Promise<TokenTransactionType>;
  amount: () => Promise<Int>;
}

export interface TokenRewardSubscription
  extends Promise<AsyncIterator<TokenReward>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  type: () => Promise<AsyncIterator<TokenTransactionType>>;
  amount: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateAnswerAttempt {
  count: Int;
}

export interface AggregateAnswerAttemptPromise
  extends Promise<AggregateAnswerAttempt>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAnswerAttemptSubscription
  extends Promise<AsyncIterator<AggregateAnswerAttempt>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FeedbackSubmissionConnection {}

export interface FeedbackSubmissionConnectionPromise
  extends Promise<FeedbackSubmissionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FeedbackSubmissionEdge>>() => T;
  aggregate: <T = AggregateFeedbackSubmissionPromise>() => T;
}

export interface FeedbackSubmissionConnectionSubscription
  extends Promise<AsyncIterator<FeedbackSubmissionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<FeedbackSubmissionEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateFeedbackSubmissionSubscription>() => T;
}

export interface CourseSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface CourseSubscriptionPayloadPromise
  extends Promise<CourseSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CoursePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CoursePreviousValuesPromise>() => T;
}

export interface CourseSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CourseSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CourseSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CoursePreviousValuesSubscription>() => T;
}

export interface CourseEdge {
  cursor: String;
}

export interface CourseEdgePromise extends Promise<CourseEdge>, Fragmentable {
  node: <T = CoursePromise>() => T;
  cursor: () => Promise<String>;
}

export interface CourseEdgeSubscription
  extends Promise<AsyncIterator<CourseEdge>>,
    Fragmentable {
  node: <T = CourseSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CoursePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  title: String;
  order: Int;
}

export interface CoursePreviousValuesPromise
  extends Promise<CoursePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  order: () => Promise<Int>;
}

export interface CoursePreviousValuesSubscription
  extends Promise<AsyncIterator<CoursePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  order: () => Promise<AsyncIterator<Int>>;
}

export interface ConstantConnection {}

export interface ConstantConnectionPromise
  extends Promise<ConstantConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ConstantEdge>>() => T;
  aggregate: <T = AggregateConstantPromise>() => T;
}

export interface ConstantConnectionSubscription
  extends Promise<AsyncIterator<ConstantConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ConstantEdgeSubscription>>>() => T;
  aggregate: <T = AggregateConstantSubscription>() => T;
}

export interface AnswerAttemptEdge {
  cursor: String;
}

export interface AnswerAttemptEdgePromise
  extends Promise<AnswerAttemptEdge>,
    Fragmentable {
  node: <T = AnswerAttemptPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AnswerAttemptEdgeSubscription
  extends Promise<AsyncIterator<AnswerAttemptEdge>>,
    Fragmentable {
  node: <T = AnswerAttemptSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface FeedbackSubmissionSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface FeedbackSubmissionSubscriptionPayloadPromise
  extends Promise<FeedbackSubmissionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FeedbackSubmissionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FeedbackSubmissionPreviousValuesPromise>() => T;
}

export interface FeedbackSubmissionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FeedbackSubmissionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FeedbackSubmissionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FeedbackSubmissionPreviousValuesSubscription>() => T;
}

export interface TokenRewardConnection {}

export interface TokenRewardConnectionPromise
  extends Promise<TokenRewardConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TokenRewardEdge>>() => T;
  aggregate: <T = AggregateTokenRewardPromise>() => T;
}

export interface TokenRewardConnectionSubscription
  extends Promise<AsyncIterator<TokenRewardConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TokenRewardEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTokenRewardSubscription>() => T;
}

export interface FeedbackSubmission {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  text: String;
  open: Boolean;
  description: String;
}

export interface FeedbackSubmissionPromise
  extends Promise<FeedbackSubmission>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  user: <T = UserPromise>() => T;
  text: () => Promise<String>;
  open: () => Promise<Boolean>;
  description: () => Promise<String>;
}

export interface FeedbackSubmissionSubscription
  extends Promise<AsyncIterator<FeedbackSubmission>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  user: <T = UserSubscription>() => T;
  text: () => Promise<AsyncIterator<String>>;
  open: () => Promise<AsyncIterator<Boolean>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface TokenRewardPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  type: TokenTransactionType;
  amount: Int;
}

export interface TokenRewardPreviousValuesPromise
  extends Promise<TokenRewardPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  type: () => Promise<TokenTransactionType>;
  amount: () => Promise<Int>;
}

export interface TokenRewardPreviousValuesSubscription
  extends Promise<AsyncIterator<TokenRewardPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  type: () => Promise<AsyncIterator<TokenTransactionType>>;
  amount: () => Promise<AsyncIterator<Int>>;
}

export interface TokenRewardSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface TokenRewardSubscriptionPayloadPromise
  extends Promise<TokenRewardSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TokenRewardPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TokenRewardPreviousValuesPromise>() => T;
}

export interface TokenRewardSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TokenRewardSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TokenRewardSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TokenRewardPreviousValuesSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface FeedbackSubmissionPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  text: String;
  open: Boolean;
  description: String;
}

export interface FeedbackSubmissionPreviousValuesPromise
  extends Promise<FeedbackSubmissionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  text: () => Promise<String>;
  open: () => Promise<Boolean>;
  description: () => Promise<String>;
}

export interface FeedbackSubmissionPreviousValuesSubscription
  extends Promise<AsyncIterator<FeedbackSubmissionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  text: () => Promise<AsyncIterator<String>>;
  open: () => Promise<AsyncIterator<Boolean>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface AggregateConstant {
  count: Int;
}

export interface AggregateConstantPromise
  extends Promise<AggregateConstant>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateConstantSubscription
  extends Promise<AsyncIterator<AggregateConstant>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateFeedbackSubmission {
  count: Int;
}

export interface AggregateFeedbackSubmissionPromise
  extends Promise<AggregateFeedbackSubmission>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFeedbackSubmissionSubscription
  extends Promise<AsyncIterator<AggregateFeedbackSubmission>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AssessmentInfo {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  answeredCorrectly: Boolean;
  solutionViewed: Boolean;
  sourceCodeViewed: Boolean;
}

export interface AssessmentInfoPromise
  extends Promise<AssessmentInfo>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  user: <T = UserPromise>() => T;
  assessment: <T = AssessmentPromise>() => T;
  answeredCorrectly: () => Promise<Boolean>;
  solutionViewed: () => Promise<Boolean>;
  sourceCodeViewed: () => Promise<Boolean>;
  answerAttempts: <T = FragmentableArray<AnswerAttempt>>(
    args?: {
      where?: AnswerAttemptWhereInput;
      orderBy?: AnswerAttemptOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface AssessmentInfoSubscription
  extends Promise<AsyncIterator<AssessmentInfo>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  user: <T = UserSubscription>() => T;
  assessment: <T = AssessmentSubscription>() => T;
  answeredCorrectly: () => Promise<AsyncIterator<Boolean>>;
  solutionViewed: () => Promise<AsyncIterator<Boolean>>;
  sourceCodeViewed: () => Promise<AsyncIterator<Boolean>>;
  answerAttempts: <T = Promise<AsyncIterator<AnswerAttemptSubscription>>>(
    args?: {
      where?: AnswerAttemptWhereInput;
      orderBy?: AnswerAttemptOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface AggregateConcept {
  count: Int;
}

export interface AggregateConceptPromise
  extends Promise<AggregateConcept>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateConceptSubscription
  extends Promise<AsyncIterator<AggregateConcept>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models = [
  {
    name: "AnswerAttempt",
    embedded: false
  },
  {
    name: "Assessment",
    embedded: false
  },
  {
    name: "AssessmentInfo",
    embedded: false
  },
  {
    name: "Concept",
    embedded: false
  },
  {
    name: "Constant",
    embedded: false
  },
  {
    name: "ConstantKey",
    embedded: false
  },
  {
    name: "Course",
    embedded: false
  },
  {
    name: "FeedbackSubmission",
    embedded: false
  },
  {
    name: "TokenReward",
    embedded: false
  },
  {
    name: "TokenTransaction",
    embedded: false
  },
  {
    name: "TokenTransactionType",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "VisibilityType",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
